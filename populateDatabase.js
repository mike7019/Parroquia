import { Sequelize } from 'sequelize';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Database configuration
const sequelize = new Sequelize(
  process.env.DB_NAME || 'parroquia_db',
  process.env.DB_USER || 'postgres',
  process.env.DB_PASSWORD || 'password',
  {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    dialect: 'postgresql',
    logging: console.log,
  }
);

async function populateDatabase() {
  try {
    console.log('üîÑ Conectando a la base de datos...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n establecida exitosamente.');

    console.log('üìù Poblando cat√°logos base...');
    await populateBaseCatalogs();

    console.log('üèõÔ∏è Poblando datos geogr√°ficos...');
    await populateGeographicData();

    console.log('‚õ™ Creando parroquia...');
    await createParroquia();

    console.log('üë• Creando datos de ejemplo...');
    await createSampleData();

    console.log('üéâ Base de datos poblada exitosamente');
  } catch (error) {
    console.error('‚ùå Error poblando la base de datos:', error);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

async function populateBaseCatalogs() {
  // Tipos de Identificaci√≥n
  await sequelize.query(`
    INSERT INTO "TipoIdentificacion" (nombre, codigo) VALUES
    ('C√©dula de Ciudadan√≠a', 'CC'),
    ('Tarjeta de Identidad', 'TI'),
    ('C√©dula de Extranjer√≠a', 'CE'),
    ('Pasaporte', 'PP'),
    ('Registro Civil', 'RC'),
    ('NIT', 'NIT'),
    ('NUIP', 'NUIP')
    ON CONFLICT (codigo) DO NOTHING;
  `);

  // Sexos
  await sequelize.query(`
    INSERT INTO "Sexo" (nombre) VALUES
    ('Masculino'),
    ('Femenino'),
    ('Otro')
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Estados Civiles
  await sequelize.query(`
    INSERT INTO "EstadoCivil" (nombre) VALUES
    ('Soltero/a'),
    ('Casado/a'),
    ('Uni√≥n Libre'),
    ('Divorciado/a'),
    ('Viudo/a'),
    ('Separado/a'),
    ('Religioso/a')
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Niveles Educativos
  await sequelize.query(`
    INSERT INTO "NivelesEducativos" (nombre, orden) VALUES
    ('Sin Educaci√≥n Formal', 1),
    ('Preescolar', 2),
    ('Primaria Incompleta', 3),
    ('Primaria Completa', 4),
    ('Bachillerato Incompleto', 5),
    ('Bachillerato Completo', 6),
    ('T√©cnico', 7),
    ('Tecnol√≥gico', 8),
    ('Universitario Incompleto', 9),
    ('Universitario Completo', 10),
    ('Especializaci√≥n', 11),
    ('Maestr√≠a', 12),
    ('Doctorado', 13)
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Destrezas
  await sequelize.query(`
    INSERT INTO "Destrezas" (nombre, descripcion, categoria) VALUES
    ('Agricultura', 'Conocimientos en cultivos y manejo de tierras', 'Agropecuaria'),
    ('Ganader√≠a', 'Manejo de ganado bovino, porcino, av√≠cola', 'Agropecuaria'),
    ('Carpinter√≠a', 'Trabajo en madera y construcci√≥n', 'Artesan√≠a'),
    ('Alba√±iler√≠a', 'Construcci√≥n y mamposter√≠a', 'Construcci√≥n'),
    ('Cocina', 'Preparaci√≥n de alimentos', 'Gastronom√≠a'),
    ('Costura', 'Confecci√≥n y reparaci√≥n de ropa', 'Textil'),
    ('Mec√°nica', 'Reparaci√≥n de veh√≠culos y maquinaria', 'T√©cnica'),
    ('Electricidad', 'Instalaciones y reparaciones el√©ctricas', 'T√©cnica'),
    ('M√∫sica', 'Instrumentos musicales y canto', 'Arte'),
    ('Catequesis', 'Ense√±anza religiosa', 'Pastoral'),
    ('Enfermer√≠a', 'Cuidados b√°sicos de salud', 'Salud'),
    ('Educaci√≥n', 'Ense√±anza y pedagog√≠a', 'Educaci√≥n'),
    ('Comercio', 'Ventas y atenci√≥n al cliente', 'Comercial'),
    ('Panader√≠a', 'Elaboraci√≥n de pan y reposter√≠a', 'Gastronom√≠a'),
    ('Tejido', 'Elaboraci√≥n de productos tejidos', 'Artesan√≠a')
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Comunidades Culturales
  await sequelize.query(`
    INSERT INTO "ComunidadesCulturales" (nombre, descripcion, region) VALUES
    ('Mestizo', 'Poblaci√≥n mestiza colombiana', 'Nacional'),
    ('Ind√≠gena Embera', 'Comunidad ind√≠gena Embera', 'Pac√≠fico'),
    ('Ind√≠gena Wayuu', 'Comunidad ind√≠gena Wayuu', 'Caribe'),
    ('Afrocolombiano', 'Comunidad afrocolombiana', 'Nacional'),
    ('Raizal', 'Poblaci√≥n raizal del Archipi√©lago', 'Insular'),
    ('Palenquero', 'Comunidad palenquera', 'Caribe'),
    ('Rom (Gitano)', 'Pueblo Rom', 'Nacional'),
    ('Campesino', 'Comunidad campesina tradicional', 'Rural'),
    ('Ind√≠gena Zen√∫', 'Comunidad ind√≠gena Zen√∫', 'Caribe'),
    ('Ind√≠gena Nasa', 'Comunidad ind√≠gena Nasa', 'Andina')
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Parentescos
  await sequelize.query(`
    INSERT INTO "Parentesco" (nombre, descripcion) VALUES
    ('Padre', 'Progenitor masculino'),
    ('Madre', 'Progenitor femenino'),
    ('Hijo/a', 'Descendiente directo'),
    ('Esposo/a', 'C√≥nyuge'),
    ('Hermano/a', 'Hermano o hermana'),
    ('Abuelo/a', 'Progenitor del padre o madre'),
    ('Nieto/a', 'Hijo/a del hijo/a'),
    ('T√≠o/a', 'Hermano/a del padre o madre'),
    ('Sobrino/a', 'Hijo/a del hermano/a'),
    ('Primo/a', 'Hijo/a del t√≠o/a'),
    ('Cu√±ado/a', 'Hermano/a del c√≥nyuge'),
    ('Suegro/a', 'Padre/madre del c√≥nyuge'),
    ('Yerno/Nuera', 'C√≥nyuge del hijo/a'),
    ('Padrastro/Madrastra', 'C√≥nyuge del progenitor'),
    ('Hijastro/a', 'Hijo/a del c√≥nyuge'),
    ('Otro', 'Otro tipo de parentesco')
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Tipos de Celebraci√≥n
  await sequelize.query(`
    INSERT INTO "TiposCelebracion" (nombre, descripcion, categoria, requiere_preparacion, duracion_preparacion_dias) VALUES
    ('Bautismo', 'Sacramento del bautismo', 'Sacramento', true, 30),
    ('Primera Comuni√≥n', 'Primera comuni√≥n eucar√≠stica', 'Sacramento', true, 365),
    ('Confirmaci√≥n', 'Sacramento de la confirmaci√≥n', 'Sacramento', true, 180),
    ('Matrimonio', 'Sacramento del matrimonio', 'Sacramento', true, 180),
    ('Unci√≥n de Enfermos', 'Sacramento para enfermos', 'Sacramento', false, 0),
    ('Funeral', 'Ceremonia f√∫nebre', 'Liturgia', false, 0),
    ('Quincea√±os', 'Celebraci√≥n de quincea√±os', 'Celebraci√≥n', true, 60),
    ('Bendici√≥n de Casa', 'Bendici√≥n del hogar', 'Bendici√≥n', false, 0),
    ('Misa de Acci√≥n de Gracias', 'Misa especial de agradecimiento', 'Liturgia', true, 7),
    ('Presentaci√≥n en el Templo', 'Presentaci√≥n de ni√±os', 'Celebraci√≥n', true, 14)
    ON CONFLICT (nombre) DO NOTHING;
  `);
}

async function populateGeographicData() {
  // Municipios de Colombia (algunos ejemplos principales)
  await sequelize.query(`
    INSERT INTO "Municipios" (nombre, codigo_dane, departamento, region) VALUES
    ('Bogot√° D.C.', '11001', 'Bogot√° D.C.', 'Andina'),
    ('Medell√≠n', '05001', 'Antioquia', 'Andina'),
    ('Cali', '76001', 'Valle del Cauca', 'Pac√≠fica'),
    ('Barranquilla', '08001', 'Atl√°ntico', 'Caribe'),
    ('Cartagena', '13001', 'Bol√≠var', 'Caribe'),
    ('C√∫cuta', '54001', 'Norte de Santander', 'Andina'),
    ('Bucaramanga', '68001', 'Santander', 'Andina'),
    ('Pereira', '66001', 'Risaralda', 'Andina'),
    ('Santa Marta', '47001', 'Magdalena', 'Caribe'),
    ('Ibagu√©', '73001', 'Tolima', 'Andina'),
    ('Pasto', '52001', 'Nari√±o', 'Andina'),
    ('Manizales', '17001', 'Caldas', 'Andina'),
    ('Neiva', '41001', 'Huila', 'Andina'),
    ('Villavicencio', '50001', 'Meta', 'Orinoqu√≠a'),
    ('Armenia', '63001', 'Quind√≠o', 'Andina'),
    ('Soacha', '25754', 'Cundinamarca', 'Andina'),
    ('Valledupar', '20001', 'Cesar', 'Caribe'),
    ('Monter√≠a', '23001', 'C√≥rdoba', 'Caribe'),
    ('Soledad', '08758', 'Atl√°ntico', 'Caribe'),
    ('Floridablanca', '68276', 'Santander', 'Andina')
    ON CONFLICT (codigo_dane) DO NOTHING;
  `);

  // Obtener IDs de municipios para crear veredas
  const [municipios] = await sequelize.query('SELECT id, nombre FROM "Municipios" LIMIT 5');
  
  for (const municipio of municipios) {
    await sequelize.query(`
      INSERT INTO "Veredas" (nombre, municipio_id, codigo, descripcion) VALUES
      ('Vereda Centro', ${municipio.id}, 'VC001', 'Vereda central del municipio'),
      ('Vereda Norte', ${municipio.id}, 'VN001', 'Vereda al norte del municipio'),
      ('Vereda Sur', ${municipio.id}, 'VS001', 'Vereda al sur del municipio'),
      ('Vereda Oriente', ${municipio.id}, 'VO001', 'Vereda oriental del municipio'),
      ('Vereda Occidente', ${municipio.id}, 'VX001', 'Vereda occidental del municipio')
      ON CONFLICT DO NOTHING;
    `);
  }
}

async function createParroquia() {
  const [municipioResult] = await sequelize.query('SELECT id FROM "Municipios" LIMIT 1');
  const municipioId = municipioResult[0]?.id || 1;

  await sequelize.query(`
    INSERT INTO "Parroquia" (nombre, direccion, telefono, email, parroco, municipio_id, fundacion, descripcion) VALUES
    ('Parroquia San Jos√©', 'Calle Principal #123', '310-555-0123', 'parroquia@sanjose.org', 'Padre Jos√© Mar√≠a Garc√≠a', ${municipioId}, '1950-03-19', 'Parroquia cat√≥lica dedicada a San Jos√©, patrono de los trabajadores')
    ON CONFLICT DO NOTHING;
  `);

  // Crear ministerios parroquiales
  const [parroquiaResult] = await sequelize.query('SELECT id FROM "Parroquia" LIMIT 1');
  const parroquiaId = parroquiaResult[0]?.id || 1;

  await sequelize.query(`
    INSERT INTO "MinisteriosParroquiales" (nombre, descripcion, fecha_creacion, activo, parroquia_id) VALUES
    ('Catequesis', 'Ministerio de ense√±anza religiosa para ni√±os y adultos', CURRENT_DATE, true, ${parroquiaId}),
    ('Coro Parroquial', 'Ministerio de m√∫sica lit√∫rgica', CURRENT_DATE, true, ${parroquiaId}),
    ('Ac√≥litos', 'Ministerio de servicio al altar', CURRENT_DATE, true, ${parroquiaId}),
    ('Lectores', 'Ministerio de la Palabra', CURRENT_DATE, true, ${parroquiaId}),
    ('Ministros Eucar√≠sticos', 'Ministerio de distribuci√≥n de la Eucarist√≠a', CURRENT_DATE, true, ${parroquiaId}),
    ('Pastoral Social', 'Ministerio de ayuda a necesitados', CURRENT_DATE, true, ${parroquiaId}),
    ('Pastoral Juvenil', 'Ministerio para j√≥venes', CURRENT_DATE, true, ${parroquiaId}),
    ('Pastoral Familiar', 'Ministerio para familias', CURRENT_DATE, true, ${parroquiaId})
    ON CONFLICT (nombre) DO NOTHING;
  `);

  // Crear grupos parroquiales
  await sequelize.query(`
    INSERT INTO "GruposParroquiales" (nombre, descripcion, tipo_grupo, fecha_creacion, dia_reunion, hora_reunion, lugar_reunion, activo, parroquia_id) VALUES
    ('Grupo de Oraci√≥n', 'Grupo de oraci√≥n y reflexi√≥n b√≠blica', 'Espiritual', CURRENT_DATE, 'Mi√©rcoles', '19:00:00', 'Sal√≥n Parroquial', true, ${parroquiaId}),
    ('Legi√≥n de Mar√≠a', 'Grupo mariano de apostolado', 'Mariano', CURRENT_DATE, 'S√°bado', '15:00:00', 'Capilla', true, ${parroquiaId}),
    ('Cursillos de Cristiandad', 'Movimiento de renovaci√≥n cristiana', 'Formaci√≥n', CURRENT_DATE, 'Domingo', '16:00:00', 'Aula 1', true, ${parroquiaId}),
    ('Renovaci√≥n Carism√°tica', 'Grupo carism√°tico cat√≥lico', 'Carism√°tico', CURRENT_DATE, 'Viernes', '20:00:00', 'Templo', true, ${parroquiaId}),
    ('Grupo Juvenil', 'J√≥venes cat√≥licos en formaci√≥n', 'Juvenil', CURRENT_DATE, 'S√°bado', '18:00:00', 'Sal√≥n Juvenil', true, ${parroquiaId})
    ON CONFLICT DO NOTHING;
  `);
}

async function createSampleData() {
  // Obtener IDs necesarios
  const [veredaResult] = await sequelize.query('SELECT id FROM "Veredas" LIMIT 1');
  const [parroquiaResult] = await sequelize.query('SELECT id FROM "Parroquia" LIMIT 1');
  const [tipoIdResult] = await sequelize.query('SELECT id FROM "TipoIdentificacion" WHERE codigo = \'CC\' LIMIT 1');
  const [sexoMResult] = await sequelize.query('SELECT id FROM "Sexo" WHERE nombre = \'Masculino\' LIMIT 1');
  const [sexoFResult] = await sequelize.query('SELECT id FROM "Sexo" WHERE nombre = \'Femenino\' LIMIT 1');
  const [estadoCivilResult] = await sequelize.query('SELECT id FROM "EstadoCivil" WHERE nombre = \'Casado/a\' LIMIT 1');
  const [nivelEducativoResult] = await sequelize.query('SELECT id FROM "NivelesEducativos" WHERE nombre = \'Bachillerato Completo\' LIMIT 1');
  const [comunidadResult] = await sequelize.query('SELECT id FROM "ComunidadesCulturales" WHERE nombre = \'Mestizo\' LIMIT 1');

  const veredaId = veredaResult[0]?.id || 1;
  const parroquiaId = parroquiaResult[0]?.id || 1;
  const tipoIdCC = tipoIdResult[0]?.id || 1;
  const sexoM = sexoMResult[0]?.id || 1;
  const sexoF = sexoFResult[0]?.id || 2;
  const estadoCivil = estadoCivilResult[0]?.id || 2;
  const nivelEducativo = nivelEducativoResult[0]?.id || 6;
  const comunidadId = comunidadResult[0]?.id || 1;

  // Crear familia de ejemplo
  await sequelize.query(`
    INSERT INTO "Familia" (nombre_familia, direccion, telefono, vereda_id, parroquia_id, observaciones, fecha_registro) VALUES
    ('Familia Garc√≠a Rodr√≠guez', 'Carrera 15 #25-30', '310-555-0001', ${veredaId}, ${parroquiaId}, 'Familia cat√≥lica activa en la parroquia', CURRENT_DATE),
    ('Familia L√≥pez Mart√≠nez', 'Calle 8 #12-45', '320-555-0002', ${veredaId}, ${parroquiaId}, 'Nueva familia en la parroquia', CURRENT_DATE),
    ('Familia P√©rez G√≥mez', 'Avenida Principal #67-89', '315-555-0003', ${veredaId}, ${parroquiaId}, 'Familia comprometida con la pastoral social', CURRENT_DATE)
    ON CONFLICT DO NOTHING;
  `);

  // Obtener IDs de familias creadas
  const [familiaResult] = await sequelize.query('SELECT id FROM "Familia" ORDER BY id LIMIT 3');
  
  if (familiaResult.length > 0) {
    const familia1Id = familiaResult[0].id;
    const familia2Id = familiaResult[1]?.id || familia1Id;
    const familia3Id = familiaResult[2]?.id || familia1Id;

    // Crear personas de ejemplo
    await sequelize.query(`
      INSERT INTO "Persona" (nombres, apellidos, tipo_identificacion_id, numero_identificacion, fecha_nacimiento, lugar_nacimiento, sexo_id, estado_civil_id, nivel_educativo_id, ocupacion, telefono, email, direccion, vereda_id, familia_id, comunidad_cultural_id, observaciones, fecha_registro, activo, profesion, estado_salud, fecha_bautismo, estado_pastoral) VALUES
      ('Jos√© Mar√≠a', 'Garc√≠a Rodr√≠guez', ${tipoIdCC}, '12345678', '1975-05-15', 'Bogot√°', ${sexoM}, ${estadoCivil}, ${nivelEducativo}, 'Agricultor', '310-555-0001', 'jose.garcia@email.com', 'Carrera 15 #25-30', ${veredaId}, ${familia1Id}, ${comunidadId}, 'Jefe de familia, activo en ministerios', CURRENT_DATE, true, 'Ingeniero Agr√≥nomo', 'Buena', '1975-06-15', 'Muy Activo'),
      ('Mar√≠a Elena', 'Rodr√≠guez de Garc√≠a', ${tipoIdCC}, '23456789', '1978-08-22', 'Medell√≠n', ${sexoF}, ${estadoCivil}, ${nivelEducativo}, 'Ama de casa', '310-555-0001', 'maria.garcia@email.com', 'Carrera 15 #25-30', ${veredaId}, ${familia1Id}, ${comunidadId}, 'L√≠der del grupo de oraci√≥n', CURRENT_DATE, true, 'Enfermera', 'Buena', '1978-09-22', 'Muy Activo'),
      ('Carlos Andr√©s', 'Garc√≠a Rodr√≠guez', ${tipoIdCC}, '34567890', '2005-03-10', 'Local', ${sexoM}, 1, 5, 'Estudiante', '320-555-0010', 'carlos.garcia@email.com', 'Carrera 15 #25-30', ${veredaId}, ${familia1Id}, ${comunidadId}, 'Hijo mayor, confirmado', CURRENT_DATE, true, 'Estudiante', 'Buena', '2005-04-10', 'Activo'),
      ('Ana Sof√≠a', 'Garc√≠a Rodr√≠guez', ${tipoIdCC}, '45678901', '2008-11-18', 'Local', ${sexoF}, 1, 4, 'Estudiante', '320-555-0011', 'ana.garcia@email.com', 'Carrera 15 #25-30', ${veredaId}, ${familia1Id}, ${comunidadId}, 'Hija menor, primera comuni√≥n', CURRENT_DATE, true, 'Estudiante', 'Buena', '2008-12-18', 'Activo'),
      ('Pedro Luis', 'L√≥pez Mart√≠nez', ${tipoIdCC}, '56789012', '1980-01-25', 'Cali', ${sexoM}, ${estadoCivil}, ${nivelEducativo}, 'Mec√°nico', '320-555-0002', 'pedro.lopez@email.com', 'Calle 8 #12-45', ${veredaId}, ${familia2Id}, ${comunidadId}, 'Nuevo feligr√©s', CURRENT_DATE, true, 'T√©cnico Mec√°nico', 'Buena', '1980-02-25', 'Nuevo'),
      ('Carmen Isabel', 'Mart√≠nez de L√≥pez', ${tipoIdCC}, '67890123', '1982-07-14', 'Barranquilla', ${sexoF}, ${estadoCivil}, ${nivelEducativo}, 'Comerciante', '320-555-0002', 'carmen.lopez@email.com', 'Calle 8 #12-45', ${veredaId}, ${familia2Id}, ${comunidadId}, 'Activa en pastoral familiar', CURRENT_DATE, true, 'Administradora', 'Buena', '1982-08-14', 'Activo')
      ON CONFLICT (numero_identificacion) DO NOTHING;
    `);

    // Crear relaciones de parentesco
    const [personaResult] = await sequelize.query('SELECT id, familia_id FROM "Persona" ORDER BY id LIMIT 6');
    const [parentescoResult] = await sequelize.query('SELECT id, nombre FROM "Parentesco"');

    if (personaResult.length > 0 && parentescoResult.length > 0) {
      // Buscar IDs de parentesco
      const padreId = parentescoResult.find(p => p.nombre === 'Padre')?.id || 1;
      const madreId = parentescoResult.find(p => p.nombre === 'Madre')?.id || 2;
      const hijoId = parentescoResult.find(p => p.nombre === 'Hijo/a')?.id || 3;

      // Crear relaciones familiares para la familia Garc√≠a
      if (personaResult.length >= 4) {
        const joseMaria = personaResult[0];
        const mariaElena = personaResult[1];
        const carlosAndres = personaResult[2];
        const anaSofia = personaResult[3];

        await sequelize.query(`
          INSERT INTO "FamiliaParentesco" (familia_id, persona_id, parentesco_id, es_jefe_familia, fecha_vinculacion) VALUES
          (${joseMaria.familia_id}, ${joseMaria.id}, ${padreId}, true, CURRENT_DATE),
          (${mariaElena.familia_id}, ${mariaElena.id}, ${madreId}, false, CURRENT_DATE),
          (${carlosAndres.familia_id}, ${carlosAndres.id}, ${hijoId}, false, CURRENT_DATE),
          (${anaSofia.familia_id}, ${anaSofia.id}, ${hijoId}, false, CURRENT_DATE)
          ON CONFLICT (familia_id, persona_id) DO NOTHING;
        `);
      }
    }

    // Asignar destrezas a personas
    const [destrezaResult] = await sequelize.query('SELECT id, nombre FROM "Destrezas" LIMIT 5');
    if (personaResult.length > 0 && destrezaResult.length > 0) {
      await sequelize.query(`
        INSERT INTO "PersonaDestreza" (persona_id, destreza_id, nivel_experiencia, fecha_adquisicion, observaciones) VALUES
        (${personaResult[0].id}, ${destrezaResult[0].id}, 'Experto', '2010-01-01', 'M√°s de 10 a√±os de experiencia'),
        (${personaResult[1].id}, ${destrezaResult[4].id}, 'Intermedio', '2015-01-01', 'Cocina tradicional'),
        (${personaResult[4].id}, ${destrezaResult[2].id}, 'Avanzado', '2018-01-01', 'Taller propio')
        ON CONFLICT (persona_id, destreza_id) DO NOTHING;
      `);
    }

    // Crear eventos parroquiales
    await sequelize.query(`
      INSERT INTO "EventosParroquiales" (nombre, descripcion, fecha_inicio, fecha_fin, lugar, responsable, tipo_evento, publico_objetivo, costo, capacidad_maxima, estado, parroquia_id) VALUES
      ('Retiro Espiritual Familiar', 'Retiro de fin de semana para familias', '2024-02-15', '2024-02-16', 'Casa de Retiros San Francisco', 'Padre Jos√© Mar√≠a', 'Retiro', 'Familias', 50000.00, 50, 'Programado', ${parroquiaId}),
      ('Festival de la Familia', 'Celebraci√≥n anual de la familia', '2024-05-01', '2024-05-01', 'Patio Parroquial', 'Pastoral Familiar', 'Festival', 'Toda la comunidad', 0.00, 200, 'Planificado', ${parroquiaId}),
      ('Curso de Preparaci√≥n Matrimonial', 'Curso pre-matrimonial', '2024-03-01', '2024-03-30', 'Sal√≥n Parroquial', 'Pastoral Familiar', 'Formaci√≥n', 'Novios', 30000.00, 20, 'Programado', ${parroquiaId})
      ON CONFLICT DO NOTHING;
    `);

    // Crear algunas celebraciones
    const [tipoCelebracionResult] = await sequelize.query('SELECT id, nombre FROM "TiposCelebracion" LIMIT 3');
    if (personaResult.length > 0 && tipoCelebracionResult.length > 0) {
      await sequelize.query(`
        INSERT INTO "Celebraciones" (tipo_celebracion_id, persona_principal_id, fecha_celebracion, lugar, parroco_celebrante, observaciones, estado) VALUES
        (${tipoCelebracionResult[0].id}, ${personaResult[2].id}, '2024-02-10', 'Templo Parroquial', 'Padre Jos√© Mar√≠a', 'Bautismo programado', 'Programada'),
        (${tipoCelebracionResult[1].id}, ${personaResult[3].id}, '2024-04-15', 'Templo Parroquial', 'Padre Jos√© Mar√≠a', 'Primera comuni√≥n', 'Preparaci√≥n'),
        (${tipoCelebracionResult[2].id}, ${personaResult[4].id}, '2024-06-20', 'Templo Parroquial', 'Padre Jos√© Mar√≠a', 'Confirmaci√≥n', 'Programada')
        ON CONFLICT DO NOTHING;
      `);
    }
  }

  console.log('‚úÖ Datos de ejemplo creados exitosamente');
}

// Ejecutar poblaci√≥n
populateDatabase();
