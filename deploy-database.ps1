# Script de despliegue de base de datos para Windows PowerShell
# Ejecutar despu√©s de git pull

param(
    [switch]$Force,
    [switch]$NoBackup
)

Write-Host "üöÄ Iniciando despliegue de base de datos..." -ForegroundColor Blue

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Error: No se encontr√≥ package.json. ¬øEst√°s en el directorio correcto?" -ForegroundColor Red
    exit 1
}

# Paso 1: Backup (opcional)
if (-not $NoBackup) {
    Write-Host "‚ÑπÔ∏è  Crear backup manual con:" -ForegroundColor Yellow
    Write-Host "pg_dump -h HOST -U USER -d DATABASE > backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql" -ForegroundColor Gray
    $continue = Read-Host "¬øContinuar? (Y/n)"
    if ($continue -eq 'n' -or $continue -eq 'N') {
        Write-Host "‚ùå Despliegue cancelado" -ForegroundColor Red
        exit 1
    }
}

# Paso 2: Instalar dependencias
Write-Host "‚ÑπÔ∏è  Instalando dependencias..." -ForegroundColor Blue
npm install --production
Write-Host "‚úÖ Dependencias actualizadas" -ForegroundColor Green

# Paso 3: Limpieza de tablas
Write-Host "‚ÑπÔ∏è  Ejecutando limpieza de tablas duplicadas..." -ForegroundColor Blue
try {
    node clean-duplicate-tables.js
    Write-Host "‚úÖ Limpieza completada" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Limpieza tuvo warnings (normal si ya est√°n limpias)" -ForegroundColor Yellow
}

# Paso 4: Sincronizaci√≥n
Write-Host "‚ÑπÔ∏è  Ejecutando sincronizaci√≥n de base de datos..." -ForegroundColor Blue
if ($Force) {
    npm run db:sync:complete force
} else {
    npm run db:sync:complete
}

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Sincronizaci√≥n completada" -ForegroundColor Green
} else {
    Write-Host "‚ùå Error en sincronizaci√≥n" -ForegroundColor Red
    exit 1
}

# Paso 5: Verificaci√≥n
Write-Host "‚ÑπÔ∏è  Verificando conexi√≥n..." -ForegroundColor Blue
$testScript = @"
import sequelize from './config/sequelize.js';
try {
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n verificada');
    await sequelize.close();
} catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
}
"@

$testScript | node --input-type=module
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Verificaci√≥n completada" -ForegroundColor Green
} else {
    Write-Host "‚ùå Error en verificaci√≥n" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üéâ Despliegue completado exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "Pr√≥ximos pasos:" -ForegroundColor Blue
Write-Host "  1. Reiniciar servidor: pm2 restart ecosystem.config.cjs" -ForegroundColor Gray
Write-Host "  2. Verificar API funciona correctamente" -ForegroundColor Gray
Write-Host "  3. Probar endpoints cr√≠ticos" -ForegroundColor Gray
