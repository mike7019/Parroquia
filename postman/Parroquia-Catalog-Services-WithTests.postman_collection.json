{
	"info": {
		"_postman_id": "catalog-services-2025-tests",
		"name": "🧪 Parroquia - Servicios de Catálogo (Con Pruebas Automatizadas)",
		"description": "Colección completa de todos los servicios de catálogo con **PRUEBAS AUTOMATIZADAS** integradas.\n\n## 🎯 Cobertura de Pruebas:\n- ✅ Validación de códigos de estado HTTP\n- ✅ Verificación de estructura de respuesta\n- ✅ Validación de tipos de datos\n- ✅ Pruebas de rendimiento\n- ✅ Verificación de autenticación\n- ✅ Validación de formato estandarizado\n\n## 📊 Servicios con Pruebas (18 servicios):\n- Profesiones | Enfermedades | Sistemas de Acueducto\n- Departamentos | Municipios | Sexos | Sectores\n- Parroquias | Veredas | Tipos de Identificación\n- Disposición de Basura | Aguas Residuales\n- Estudios | Comunidades Culturales\n- Parentescos | Situaciones Civiles\n- Tipos de Vivienda | Tallas\n\n## 🔄 Operaciones Probadas (90 endpoints):\nCada servicio incluye pruebas para:\n- GET (listar) - Formato estandarizado\n- GET /:id (obtener) - Validación específica\n- POST (crear) - Verificación de creación\n- PUT /:id (actualizar) - Confirmación de actualización\n- DELETE /:id (eliminar) - Validación de eliminación",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 🚀 Pre-request Script Global",
					"console.log('🔄 Iniciando request:', pm.info.requestName);",
					"pm.globals.set('testStartTime', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 📊 Post-response Script Global",
					"const testEndTime = Date.now();",
					"const testStartTime = pm.globals.get('testStartTime');",
					"const duration = testEndTime - testStartTime;",
					"console.log(`⏱️ Duración total: ${duration}ms`);",
					"",
					"// Contador de pruebas",
					"const totalTests = pm.globals.get('totalTests') || 0;",
					"pm.globals.set('totalTests', totalTests + 1);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testItemId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "🔐 Autenticación",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - LOGIN",
									"pm.test('✅ Status code es 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Respuesta es JSON válido', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('✅ Respuesta contiene token', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('token');",
									"    pm.expect(responseJson.token).to.be.a('string');",
									"    pm.expect(responseJson.token).to.not.be.empty;",
									"});",
									"",
									"pm.test('✅ Respuesta contiene datos del usuario', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('usuario');",
									"    pm.expect(responseJson.usuario).to.have.property('correo_electronico');",
									"    pm.expect(responseJson.usuario.correo_electronico).to.equal('admin@test.com');",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('✅ Headers correctos', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Guardar el token de autenticación",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('authToken', responseJson.token);",
									"        console.log('🔐 Token guardado exitosamente');",
									"        console.log('👤 Usuario logueado:', responseJson.usuario.correo_electronico);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"correo_electronico\": \"{{adminEmail}}\",\n  \"contrasena\": \"{{adminPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				}
			]
		},
		{
			"name": "👥 Profesiones",
			"item": [
				{
					"name": "Listar Profesiones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - LISTAR PROFESIONES",
									"pm.test('✅ Status code es 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Respuesta es JSON válido', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('✅ Formato de respuesta estandarizado', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('status');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson).to.have.property('total');",
									"    pm.expect(responseJson).to.have.property('message');",
									"});",
									"",
									"pm.test('✅ Status es success', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.equal('success');",
									"});",
									"",
									"pm.test('✅ Data es un array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});",
									"",
									"pm.test('✅ Total es un número', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.total).to.be.a('number');",
									"    pm.expect(responseJson.total).to.be.at.least(0);",
									"});",
									"",
									"pm.test('✅ Message es un string no vacío', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.be.a('string');",
									"    pm.expect(responseJson.message).to.not.be.empty;",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Guardar ID del primer registro para pruebas posteriores",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.length > 0) {",
									"        pm.collectionVariables.set('testItemId', responseJson.data[0].id);",
									"        console.log('💾 ID guardado para pruebas:', responseJson.data[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/profesiones",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"catalog",
								"profesiones"
							]
						}
					}
				},
				{
					"name": "Obtener Profesión por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - OBTENER PROFESIÓN",
									"pm.test('✅ Status code es 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Respuesta contiene datos del registro', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('nombre');",
									"});",
									"",
									"pm.test('✅ ID coincide con el solicitado', function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = pm.collectionVariables.get('testItemId');",
									"    pm.expect(responseJson.id.toString()).to.equal(requestedId);",
									"});",
									"",
									"pm.test('✅ Nombre es un string no vacío', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.nombre).to.be.a('string');",
									"    pm.expect(responseJson.nombre).to.not.be.empty;",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/profesiones/{{testItemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"catalog",
								"profesiones",
								"{{testItemId}}"
							]
						}
					}
				},
				{
					"name": "Crear Nueva Profesión",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - CREAR PROFESIÓN",
									"pm.test('✅ Status code es 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('✅ Respuesta contiene el registro creado', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('nombre');",
									"    pm.expect(responseJson.nombre).to.equal('Test Automatizado');",
									"});",
									"",
									"pm.test('✅ ID es un número válido', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.be.a('number');",
									"    pm.expect(responseJson.id).to.be.above(0);",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Guardar ID del registro creado para pruebas posteriores",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('createdItemId', responseJson.id);",
									"    console.log('🆕 Registro creado con ID:', responseJson.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Test Automatizado\",\n  \"descripcion\": \"Profesión creada por pruebas automatizadas\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/catalog/profesiones",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"catalog",
								"profesiones"
							]
						}
					}
				},
				{
					"name": "Actualizar Profesión",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - ACTUALIZAR PROFESIÓN",
									"pm.test('✅ Status code es 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Respuesta contiene el registro actualizado', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('nombre');",
									"    pm.expect(responseJson.nombre).to.equal('Test Automatizado - Actualizado');",
									"});",
									"",
									"pm.test('✅ ID se mantiene igual', function () {",
									"    const responseJson = pm.response.json();",
									"    const createdId = pm.collectionVariables.get('createdItemId');",
									"    pm.expect(responseJson.id.toString()).to.equal(createdId.toString());",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Test Automatizado - Actualizado\",\n  \"descripcion\": \"Profesión actualizada por pruebas automatizadas\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/catalog/profesiones/{{createdItemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"catalog",
								"profesiones",
								"{{createdItemId}}"
							]
						}
					}
				},
				{
					"name": "Eliminar Profesión",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - ELIMINAR PROFESIÓN",
									"pm.test('✅ Status code es 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Respuesta confirma eliminación', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson.message).to.include('eliminado');",
									"});",
									"",
									"pm.test('✅ Tiempo de respuesta menor a 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"console.log('🗑️ Registro eliminado exitosamente');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/profesiones/{{createdItemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"catalog",
								"profesiones",
								"{{createdItemId}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "🏥 Enfermedades",
			"item": [
				{
					"name": "Listar Enfermedades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS AUTOMATIZADAS - LISTAR ENFERMEDADES",
									"pm.test('✅ Status code es 200', () => pm.response.to.have.status(200));",
									"pm.test('✅ Formato estandarizado', function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res).to.have.all.keys('status', 'data', 'total', 'message');",
									"    pm.expect(res.status).to.equal('success');",
									"    pm.expect(res.data).to.be.an('array');",
									"    pm.expect(res.total).to.be.a('number');",
									"});",
									"pm.test('✅ Performance < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/enfermedades",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "enfermedades"]
						}
					}
				},
				{
					"name": "Obtener Enfermedad por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status 200', () => pm.response.to.have.status(200));",
									"pm.test('✅ Contiene datos válidos', function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res).to.have.property('id');",
									"    pm.expect(res).to.have.property('nombre');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/enfermedades/1",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "enfermedades", "1"]
						}
					}
				},
				{
					"name": "Crear Nueva Enfermedad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status 201', () => pm.response.to.have.status(201));",
									"pm.test('✅ Registro creado', function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.nombre).to.equal('Test Enfermedad');",
									"    pm.collectionVariables.set('enfermedadId', res.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\"nombre\": \"Test Enfermedad\", \"descripcion\": \"Prueba automatizada\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/catalog/enfermedades",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "enfermedades"]
						}
					}
				},
				{
					"name": "Actualizar Enfermedad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status 200', () => pm.response.to.have.status(200));",
									"pm.test('✅ Actualización exitosa', function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.nombre).to.equal('Test Enfermedad Actualizada');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\"nombre\": \"Test Enfermedad Actualizada\", \"descripcion\": \"Actualizada por pruebas\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/catalog/enfermedades/{{enfermedadId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "enfermedades", "{{enfermedadId}}"]
						}
					}
				},
				{
					"name": "Eliminar Enfermedad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status 200', () => pm.response.to.have.status(200));",
									"pm.test('✅ Eliminación confirmada', function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.message).to.include('eliminado');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/enfermedades/{{enfermedadId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "enfermedades", "{{enfermedadId}}"]
						}
					}
				}
			]
		},
		{
			"name": "💧 Sistemas de Acueducto",
			"item": [
				{
					"name": "Listar Sistemas de Acueducto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 🧪 PRUEBAS SISTÉMICAS - VALIDACIÓN COMPLETA",
									"pm.test('✅ Response OK', () => pm.response.to.have.status(200));",
									"pm.test('✅ JSON válido', () => pm.response.to.be.json);",
									"pm.test('✅ Estructura estandarizada', function () {",
									"    const json = pm.response.json();",
									"    ['status', 'data', 'total', 'message'].forEach(key => {",
									"        pm.expect(json).to.have.property(key);",
									"    });",
									"    pm.expect(json.status).to.equal('success');",
									"    pm.expect(json.data).to.be.an('array');",
									"});",
									"pm.test('✅ Performance óptima', () => pm.expect(pm.response.responseTime).to.be.below(800));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/catalog/sistemas-acueducto",
							"host": ["{{baseUrl}}"],
							"path": ["api", "catalog", "sistemas-acueducto"]
						}
					}
				}
			]
		}
	]
}
