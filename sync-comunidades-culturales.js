// Script para sincronizar la tabla comunidades_culturales
import sequelize from './config/sequelize.js';
import './src/models/main/ComunidadCultural.cjs';

async function syncComunidadesCulturales() {
    try {
        console.log('üîç Conectando a la base de datos...');
        await sequelize.authenticate();
        console.log('‚úÖ Conexi√≥n establecida correctamente');

        console.log('üì¶ Cargando modelo ComunidadCultural...');
        const ComunidadCultural = sequelize.models.ComunidadCultural;
        
        if (!ComunidadCultural) {
            console.error('‚ùå Modelo ComunidadCultural no encontrado');
            process.exit(1);
        }

        console.log('üîß Sincronizando tabla comunidades_culturales...');
        await ComunidadCultural.sync({ force: false });
        console.log('‚úÖ Tabla comunidades_culturales sincronizada exitosamente');

        // Verificar si ya existen datos
        const count = await ComunidadCultural.count();
        console.log(`üìä Registros existentes: ${count}`);

        // Si no hay datos, insertar algunos de muestra
        if (count === 0) {
            console.log('üìù Insertando datos de muestra...');
            
            const datosEjemplo = [
                { nombre: 'Afrodescendiente', descripcion: 'Comunidad de personas afrodescendientes', activo: true },
                { nombre: 'Ind√≠gena', descripcion: 'Comunidades ind√≠genas ancestrales', activo: true },
                { nombre: 'Mestiza', descripcion: 'Comunidad mestiza tradicional', activo: true },
                { nombre: 'Raizal', descripcion: 'Comunidad raizal del archipi√©lago', activo: true },
                { nombre: 'Palenquera', descripcion: 'Comunidad palenquera', activo: true },
                { nombre: 'ROM (Gitana)', descripcion: 'Comunidad ROM o gitana', activo: true },
                { nombre: 'Campesina', descripcion: 'Comunidad campesina rural', activo: true },
                { nombre: 'Urbana', descripcion: 'Comunidad urbana', activo: true },
                { nombre: 'Ribere√±a', descripcion: 'Comunidad ribere√±a', activo: true },
                { nombre: 'Monta√±esa', descripcion: 'Comunidad de las monta√±as', activo: true },
                { nombre: 'Costera', descripcion: 'Comunidad de las costas', activo: true },
                { nombre: 'Llanera', descripcion: 'Comunidad de los llanos', activo: true },
                { nombre: 'Amaz√≥nica', descripcion: 'Comunidad de la regi√≥n amaz√≥nica', activo: true },
                { nombre: 'Andina', descripcion: 'Comunidad de la regi√≥n andina', activo: true },
                { nombre: 'Pac√≠fica', descripcion: 'Comunidad de la regi√≥n pac√≠fica', activo: true },
                { nombre: 'Caribe√±a', descripcion: 'Comunidad de la regi√≥n caribe√±a', activo: true },
                { nombre: 'Orinoquia', descripcion: 'Comunidad de la Orinoquia', activo: true },
                { nombre: 'Isle√±a', descripcion: 'Comunidad de las islas', activo: true },
                { nombre: 'Fronteriza', descripcion: 'Comunidad de zonas fronterizas', activo: true },
                { nombre: 'Minera', descripcion: 'Comunidad minera tradicional', activo: true }
            ];

            await ComunidadCultural.bulkCreate(datosEjemplo);
            console.log(`‚úÖ ${datosEjemplo.length} registros insertados exitosamente`);
        }

        // Consulta de verificaci√≥n
        const comunidades = await ComunidadCultural.findAll({
            order: [['nombre', 'ASC']],
            limit: 5
        });

        console.log('üìã Primeras 5 comunidades culturales:');
        comunidades.forEach(c => {
            console.log(`  - ID: ${c.id_comunidad_cultural}, Nombre: ${c.nombre}`);
        });

        console.log('‚úÖ Sincronizaci√≥n completada exitosamente');
        
    } catch (error) {
        console.error('‚ùå Error durante la sincronizaci√≥n:', error.message);
        console.error(error);
        process.exit(1);
    } finally {
        await sequelize.close();
    }
}

syncComunidadesCulturales();
