const { connectToDatabase, sequelize } = require('./config/database');
const fs = require('fs');
const path = require('path');

async function syncDataTables() {
  try {
    console.log('üîÑ Iniciando sincronizaci√≥n de datos de tablas...\n');
    
    // Conectar a la base de datos
    await connectToDatabase();
    console.log('‚úÖ Conexi√≥n a base de datos establecida\n');
    
    // Verificar estado de las tablas principales
    console.log('üìä Verificando datos en tablas principales:\n');
    
    const tablesToCheck = [
      'departamentos',
      'municipios', 
      'sectores',
      'veredas',
      'sexos',
      'tipos_identificacion',
      'estados_civiles',
      'tipos_vivienda',
      'sistemas_acueducto',
      'tipos_aguas_residuales',
      'tipos_disposicion_basura',
      'roles',
      'enfermedades',
      'profesiones',
      'parentescos',
      'situaciones_civiles',
      'niveles_educativos'
    ];
    
    for (const table of tablesToCheck) {
      try {
        const [results] = await sequelize.query(`SELECT COUNT(*) as count FROM ${table}`);
        const count = parseInt(results[0].count);
        
        if (count === 0) {
          console.log(`‚ö†Ô∏è  ${table}: VAC√çA (${count} registros)`);
        } else if (count < 5) {
          console.log(`üî∏ ${table}: POCOS DATOS (${count} registros)`);
        } else {
          console.log(`‚úÖ ${table}: OK (${count} registros)`);
        }
      } catch (error) {
        console.log(`‚ùå ${table}: ERROR - ${error.message}`);
      }
    }
    
    console.log('\nüå± Ejecutando seeders para poblar datos faltantes...\n');
    
    // Ejecutar seeders b√°sicos
    await runBasicSeeders();
    
    console.log('\nüìã Verificaci√≥n final del estado de datos:\n');
    
    // Verificar nuevamente despu√©s de seeders
    for (const table of tablesToCheck.slice(0, 10)) { // Solo las primeras 10 para no saturar
      try {
        const [results] = await sequelize.query(`SELECT COUNT(*) as count FROM ${table}`);
        const count = parseInt(results[0].count);
        console.log(`  üìä ${table}: ${count} registros`);
      } catch (error) {
        console.log(`  ‚ùå ${table}: ERROR - ${error.message}`);
      }
    }
    
    console.log('\n‚úÖ Sincronizaci√≥n de datos completada');
    
  } catch (error) {
    console.error('‚ùå Error en sincronizaci√≥n de datos:', error);
  } finally {
    await sequelize.close();
    console.log('üîå Conexi√≥n cerrada');
  }
}

async function runBasicSeeders() {
  console.log('üå± Ejecutando seeders b√°sicos...');
  
  // Seeder de Sexos
  try {
    const [sexosCount] = await sequelize.query('SELECT COUNT(*) as count FROM sexos');
    if (parseInt(sexosCount[0].count) === 0) {
      await sequelize.query(`
        INSERT INTO sexos (nombre, codigo, descripcion, created_at, updated_at) VALUES
        ('Masculino', 'M', 'Persona de sexo masculino', NOW(), NOW()),
        ('Femenino', 'F', 'Persona de sexo femenino', NOW(), NOW()),
        ('Otro', 'O', 'Otra identificaci√≥n de g√©nero', NOW(), NOW())
      `);
      console.log('  ‚úÖ Sexos: datos insertados');
    } else {
      console.log('  ‚ÑπÔ∏è  Sexos: datos ya existen');
    }
  } catch (error) {
    console.log('  ‚ùå Sexos: Error -', error.message);
  }
  
  // Seeder de Tipos de Identificaci√≥n
  try {
    const [tiposCount] = await sequelize.query('SELECT COUNT(*) as count FROM tipos_identificacion');
    if (parseInt(tiposCount[0].count) === 0) {
      await sequelize.query(`
        INSERT INTO tipos_identificacion (nombre, codigo, descripcion, activo, created_at, updated_at) VALUES
        ('C√©dula de Ciudadan√≠a', 'CC', 'Documento de identificaci√≥n para ciudadanos colombianos', true, NOW(), NOW()),
        ('Tarjeta de Identidad', 'TI', 'Documento de identificaci√≥n para menores de edad', true, NOW(), NOW()),
        ('C√©dula de Extranjer√≠a', 'CE', 'Documento de identificaci√≥n para extranjeros', true, NOW(), NOW()),
        ('Pasaporte', 'PA', 'Documento de identificaci√≥n internacional', true, NOW(), NOW()),
        ('Registro Civil', 'RC', 'Documento de identificaci√≥n para reci√©n nacidos', true, NOW(), NOW())
      `);
      console.log('  ‚úÖ Tipos de Identificaci√≥n: datos insertados');
    } else {
      console.log('  ‚ÑπÔ∏è  Tipos de Identificaci√≥n: datos ya existen');
    }
  } catch (error) {
    console.log('  ‚ùå Tipos de Identificaci√≥n: Error -', error.message);
  }
  
  // Seeder de Estados Civiles
  try {
    const [estadosCount] = await sequelize.query('SELECT COUNT(*) as count FROM estados_civiles');
    if (parseInt(estadosCount[0].count) === 0) {
      await sequelize.query(`
        INSERT INTO estados_civiles (nombre, descripcion, activo, created_at, updated_at) VALUES
        ('Soltero/a', 'Persona sin v√≠nculo matrimonial', true, NOW(), NOW()),
        ('Casado/a', 'Persona con v√≠nculo matrimonial civil o religioso', true, NOW(), NOW()),
        ('Uni√≥n Libre', 'Persona en convivencia sin v√≠nculo matrimonial formal', true, NOW(), NOW()),
        ('Divorciado/a', 'Persona que ha disuelto su v√≠nculo matrimonial', true, NOW(), NOW()),
        ('Viudo/a', 'Persona cuyo c√≥nyuge ha fallecido', true, NOW(), NOW()),
        ('Separado/a', 'Persona separada de facto pero sin divorcio', true, NOW(), NOW())
      `);
      console.log('  ‚úÖ Estados Civiles: datos insertados');
    } else {
      console.log('  ‚ÑπÔ∏è  Estados Civiles: datos ya existen');
    }
  } catch (error) {
    console.log('  ‚ùå Estados Civiles: Error -', error.message);
  }
  
  // Seeder de Roles
  try {
    const [rolesCount] = await sequelize.query('SELECT COUNT(*) as count FROM roles');
    if (parseInt(rolesCount[0].count) === 0) {
      await sequelize.query(`
        INSERT INTO roles (nombre, descripcion, activo, created_at, updated_at) VALUES
        ('admin', 'Administrador del sistema con acceso completo', true, NOW(), NOW()),
        ('encuestador', 'Usuario encargado de realizar encuestas', true, NOW(), NOW()),
        ('consultor', 'Usuario con acceso de solo lectura para consultas', true, NOW(), NOW()),
        ('moderador', 'Usuario con permisos de moderaci√≥n limitados', true, NOW(), NOW())
      `);
      console.log('  ‚úÖ Roles: datos insertados');
    } else {
      console.log('  ‚ÑπÔ∏è  Roles: datos ya existen');
    }
  } catch (error) {
    console.log('  ‚ùå Roles: Error -', error.message);
  }
  
  console.log('üå± Seeders b√°sicos completados');
}

// Ejecutar
syncDataTables();
