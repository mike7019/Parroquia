/**
 * Script para sincronizar el modelo SistemaAcueducto con la base de datos
 */

import sequelize from './config/sequelize.js';
import SistemaAcueducto from './src/models/catalog/SistemaAcueducto.js';

async function syncSistemaAcueducto() {
  try {
    console.log('üîÑ Sincronizando modelo SistemaAcueducto con la base de datos...\n');

    // Conectar a la base de datos
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida\n');

    // Verificar estado actual de la tabla
    console.log('üìã Estado actual de la tabla sistemas_acueducto:');
    const [currentStructure] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'sistemas_acueducto'
      ORDER BY ordinal_position
    `);
    console.log('Estructura actual:', currentStructure);

    // Verificar √≠ndices √∫nicos existentes
    console.log('\nüîç Verificando √≠ndices √∫nicos existentes:');
    const [uniqueConstraints] = await sequelize.query(`
      SELECT constraint_name, column_name
      FROM information_schema.key_column_usage 
      WHERE table_name = 'sistemas_acueducto' 
      AND constraint_name LIKE '%unique%' OR constraint_name LIKE '%pkey%'
    `);
    console.log('Restricciones √∫nicas:', uniqueConstraints);

    // Sincronizar el modelo (alter: true para actualizar la estructura)
    console.log('\nüîß Sincronizando modelo...');
    await SistemaAcueducto.sync({ alter: true });
    console.log('‚úÖ Modelo sincronizado exitosamente');

    // Verificar nueva estructura
    console.log('\nüìã Nueva estructura de la tabla:');
    const [newStructure] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'sistemas_acueducto'
      ORDER BY ordinal_position
    `);
    console.log('Nueva estructura:', newStructure);

    // Verificar nuevos √≠ndices √∫nicos
    console.log('\nüîç Verificando nuevos √≠ndices √∫nicos:');
    const [newUniqueConstraints] = await sequelize.query(`
      SELECT constraint_name, column_name
      FROM information_schema.key_column_usage 
      WHERE table_name = 'sistemas_acueducto' 
      AND constraint_name LIKE '%unique%' OR constraint_name LIKE '%pkey%'
    `);
    console.log('Nuevas restricciones √∫nicas:', newUniqueConstraints);

    // Probar la restricci√≥n √∫nica
    console.log('\nüß™ Probando restricci√≥n √∫nica...');
    try {
      // Intentar crear dos registros con el mismo nombre
      const testName = `Test √önico ${Date.now()}`;
      
      const sistema1 = await SistemaAcueducto.create({
        nombre: testName,
        descripcion: 'Primer sistema de prueba'
      });
      console.log('‚úÖ Primer sistema creado:', sistema1.nombre);

      try {
        const sistema2 = await SistemaAcueducto.create({
          nombre: testName, // Mismo nombre
          descripcion: 'Segundo sistema de prueba'
        });
        console.log('‚ùå ERROR: Se permiti√≥ crear sistema duplicado');
      } catch (uniqueError) {
        console.log('‚úÖ Restricci√≥n √∫nica funcionando:', uniqueError.name);
      }

      // Limpiar el registro de prueba
      await sistema1.destroy();
      console.log('üßπ Registro de prueba eliminado');

    } catch (testError) {
      console.log('‚ö†Ô∏è Error durante la prueba:', testError.message);
    }

    console.log('\nüéâ Sincronizaci√≥n completada exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante la sincronizaci√≥n:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await sequelize.close();
    console.log('\nüì™ Conexi√≥n cerrada');
  }
}

// Ejecutar la sincronizaci√≥n
syncSistemaAcueducto();
