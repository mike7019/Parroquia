import sequelize from './config/sequelize.js';
import { loadAllModels } from './syncDatabaseComplete.js';

/**
 * Script para sincronizar el modelo de ComunidadCultural con la base de datos
 */
async function syncComunidadCulturalModel() {
  try {
    console.log('üîÑ Iniciando sincronizaci√≥n del modelo ComunidadCultural...');
    
    // Conectar a la base de datos
    console.log('üì° Conectando a la base de datos...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n establecida exitosamente');
    
    // Cargar todos los modelos
    console.log('üì¶ Cargando todos los modelos...');
    await loadAllModels();
    console.log('‚úÖ Modelos cargados exitosamente');
    
    // Sincronizar solo la tabla de comunidades culturales
    console.log('üîÑ Sincronizando tabla comunidades_culturales...');
    await sequelize.models.ComunidadCultural.sync({ alter: true });
    console.log('‚úÖ Tabla comunidades_culturales sincronizada exitosamente');
    
    // Mostrar informaci√≥n de la tabla creada
    const tableInfo = await sequelize.getQueryInterface().describeTable('comunidades_culturales');
    console.log('üìã Estructura de la tabla comunidades_culturales:');
    console.table(tableInfo);
    
    // Insertar datos de ejemplo si la tabla est√° vac√≠a
    const count = await sequelize.models.ComunidadCultural.count();
    if (count === 0) {
      console.log('üìù Insertando datos de ejemplo...');
      
      const comunidadesCulturalesEjemplo = [
        { 
          nombre: 'Afrodescendiente', 
          descripcion: 'Comunidad de personas descendientes de africanos que conservan tradiciones y cultura africana'
        },
        { 
          nombre: 'Ind√≠gena', 
          descripcion: 'Pueblos originarios que mantienen sus tradiciones ancestrales y estructura social propia'
        },
        { 
          nombre: 'Mestizo', 
          descripcion: 'Poblaci√≥n resultado del mestizaje entre diferentes grupos √©tnicos'
        },
        { 
          nombre: 'Raizal', 
          descripcion: 'Grupo √©tnico del Archipi√©lago de San Andr√©s, Providencia y Santa Catalina'
        },
        { 
          nombre: 'Palenquero', 
          descripcion: 'Comunidad descendiente de cimarrones de San Basilio de Palenque'
        },
        { 
          nombre: 'Gitano - ROM', 
          descripcion: 'Pueblo n√≥mada con tradiciones culturales espec√≠ficas y lengua propia'
        },
        { 
          nombre: 'Campesino', 
          descripcion: 'Comunidad rural dedicada principalmente a actividades agropecuarias'
        },
        { 
          nombre: 'Wayuu', 
          descripcion: 'Pueblo ind√≠gena de La Guajira que mantiene sus tradiciones y organizaci√≥n social'
        },
        { 
          nombre: 'Embera', 
          descripcion: 'Pueblo ind√≠gena que habita principalmente en las regiones del Choc√≥ y Antioquia'
        },
        { 
          nombre: 'Nasa', 
          descripcion: 'Pueblo ind√≠gena del Cauca que conserva su idioma y tradiciones ancestrales'
        },
        { 
          nombre: 'Zen√∫', 
          descripcion: 'Pueblo ind√≠gena de las sabanas de C√≥rdoba, Sucre y Bol√≠var'
        },
        { 
          nombre: 'Arhuaco', 
          descripcion: 'Pueblo ind√≠gena de la Sierra Nevada de Santa Marta con profundas tradiciones espirituales'
        },
        { 
          nombre: 'Kogi', 
          descripcion: 'Pueblo ind√≠gena hermano mayor de la Sierra Nevada de Santa Marta'
        },
        { 
          nombre: 'Wiwa', 
          descripcion: 'Pueblo ind√≠gena de la Sierra Nevada conocido por su sabidur√≠a ancestral'
        },
        { 
          nombre: 'Inga', 
          descripcion: 'Pueblo ind√≠gena del sur del pa√≠s, principalmente en Putumayo y Nari√±o'
        },
        { 
          nombre: 'Guambiano', 
          descripcion: 'Pueblo ind√≠gena del Cauca conocido por sus tejidos y tradiciones'
        },
        { 
          nombre: 'Tikuna', 
          descripcion: 'Pueblo ind√≠gena de la Amazon√≠a colombiana'
        },
        { 
          nombre: 'Cof√°n', 
          descripcion: 'Pueblo ind√≠gena de la regi√≥n amaz√≥nica'
        },
        { 
          nombre: 'Urbano', 
          descripcion: 'Poblaci√≥n que ha desarrollado cultura propia de las ciudades'
        },
        { 
          nombre: 'Ninguna', 
          descripcion: 'No se identifica con ninguna comunidad cultural espec√≠fica'
        }
      ];
      
      await sequelize.models.ComunidadCultural.bulkCreate(comunidadesCulturalesEjemplo);
      console.log(`‚úÖ Se insertaron ${comunidadesCulturalesEjemplo.length} registros de ejemplo`);
      
      // Mostrar los registros insertados
      const comunidades = await sequelize.models.ComunidadCultural.findAll({
        order: [['nombre', 'ASC']]
      });
      
      console.log('\nüìã Comunidades Culturales insertadas:');
      comunidades.forEach((comunidad, index) => {
        console.log(`   ${index + 1}. ${comunidad.nombre}`);
        if (comunidad.descripcion) {
          console.log(`      üìù ${comunidad.descripcion}`);
        }
      });
    } else {
      console.log(`‚ÑπÔ∏è  La tabla ya contiene ${count} registros`);
    }
    
    console.log('\nüéâ Sincronizaci√≥n completada exitosamente');
    console.log('\nüìö Endpoints disponibles:');
    console.log('   ‚Ä¢ GET    /api/catalog/comunidades-culturales - Listar todas las comunidades culturales');
    console.log('   ‚Ä¢ GET    /api/catalog/comunidades-culturales/select - Obtener para dropdown');
    console.log('   ‚Ä¢ GET    /api/catalog/comunidades-culturales/stats - Obtener estad√≠sticas');
    console.log('   ‚Ä¢ GET    /api/catalog/comunidades-culturales/:id - Obtener comunidad por ID');
    console.log('   ‚Ä¢ POST   /api/catalog/comunidades-culturales - Crear nueva comunidad cultural');
    console.log('   ‚Ä¢ PUT    /api/catalog/comunidades-culturales/:id - Actualizar comunidad cultural');
    console.log('   ‚Ä¢ DELETE /api/catalog/comunidades-culturales/:id - Eliminar comunidad cultural (soft delete)');
    
    // Verificar que las rutas est√©n disponibles
    console.log('\nüîç Verificando disponibilidad de endpoints...');
    try {
      const stats = await sequelize.models.ComunidadCultural.count();
      console.log(`‚úÖ Modelo funcional - Total de registros: ${stats}`);
    } catch (error) {
      console.error('‚ùå Error verificando el modelo:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la sincronizaci√≥n:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    // Cerrar la conexi√≥n
    console.log('\nüîÑ Cerrando conexi√≥n a la base de datos...');
    await sequelize.close();
    console.log('‚úÖ Conexi√≥n cerrada');
  }
}

// Ejecutar la sincronizaci√≥n
syncComunidadCulturalModel();
