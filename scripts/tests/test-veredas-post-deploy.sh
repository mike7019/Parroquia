#!/bin/bash

# üß™ Script para probar endpoints de veredas despu√©s del deployment

echo "üß™ Probando endpoints de veredas en servidor..."
echo "üìÖ $(date)"
echo ""

# Configuraci√≥n del servidor (ajustar seg√∫n corresponda)
SERVER_URL="http://localhost:3000"  # Cambiar por la URL del servidor
ADMIN_EMAIL="admin@test.com"
ADMIN_PASSWORD="Admin123!"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Obtener token de autenticaci√≥n
log_info "Obteniendo token de autenticaci√≥n..."

AUTH_RESPONSE=$(curl -s -X POST "$SERVER_URL/api/auth/login" \
  -H "Content-Type: application/json" \
  -d "{\"correo_electronico\":\"$ADMIN_EMAIL\",\"contrasena\":\"$ADMIN_PASSWORD\"}")

if [[ $? -ne 0 ]]; then
    log_error "No se pudo conectar al servidor en $SERVER_URL"
    exit 1
fi

# Extraer token usando jq (si est√° disponible) o sed
if command -v jq &> /dev/null; then
    TOKEN=$(echo $AUTH_RESPONSE | jq -r '.data.accessToken // empty')
else
    TOKEN=$(echo $AUTH_RESPONSE | sed 's/.*"accessToken":"\([^"]*\)".*/\1/')
fi

if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
    log_error "No se pudo obtener token de autenticaci√≥n"
    echo "Respuesta del servidor: $AUTH_RESPONSE"
    exit 1
fi

log_success "Token obtenido correctamente"

# Headers para las siguientes peticiones
HEADERS=(-H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json")

# 2. Probar GET /api/catalog/veredas
log_info "Probando GET /api/catalog/veredas..."

VEREDAS_RESPONSE=$(curl -s -X GET "$SERVER_URL/api/catalog/veredas" "${HEADERS[@]}")

if echo "$VEREDAS_RESPONSE" | grep -q '"success":true' && echo "$VEREDAS_RESPONSE" | grep -q '"status":"success"'; then
    log_success "Endpoint GET /api/catalog/veredas funciona correctamente"
    
    # Extraer cantidad de veredas
    if command -v jq &> /dev/null; then
        TOTAL_VEREDAS=$(echo $VEREDAS_RESPONSE | jq -r '.data.total // 0')
        log_info "Total de veredas encontradas: $TOTAL_VEREDAS"
    fi
else
    log_error "Endpoint GET /api/catalog/veredas fall√≥"
    echo "Respuesta: $VEREDAS_RESPONSE"
    exit 1
fi

# 3. Probar b√∫squeda de veredas
log_info "Probando b√∫squeda de veredas..."

SEARCH_RESPONSE=$(curl -s -X GET "$SERVER_URL/api/catalog/veredas/search?q=test" "${HEADERS[@]}")

if echo "$SEARCH_RESPONSE" | grep -q '"success":true'; then
    log_success "Endpoint de b√∫squeda funciona correctamente"
else
    log_error "Endpoint de b√∫squeda fall√≥"
    echo "Respuesta: $SEARCH_RESPONSE"
fi

# 4. Probar estad√≠sticas
log_info "Probando estad√≠sticas de veredas..."

STATS_RESPONSE=$(curl -s -X GET "$SERVER_URL/api/catalog/veredas/statistics" "${HEADERS[@]}")

if echo "$STATS_RESPONSE" | grep -q '"success":true'; then
    log_success "Endpoint de estad√≠sticas funciona correctamente"
else
    log_error "Endpoint de estad√≠sticas fall√≥"
    echo "Respuesta: $STATS_RESPONSE"
fi

# 5. Verificar que no haya errores de id_sector
log_info "Verificando que no haya errores de id_sector..."

if echo "$VEREDAS_RESPONSE" | grep -q "id_sector.*does not exist"; then
    log_error "¬°A√∫n hay referencias a id_sector!"
    echo "Respuesta completa: $VEREDAS_RESPONSE"
    exit 1
else
    log_success "No se encontraron errores de id_sector"
fi

# Resumen final
echo ""
echo "üéâ PRUEBAS COMPLETADAS"
echo "======================"
log_success "‚úÖ Autenticaci√≥n funcional"
log_success "‚úÖ Endpoint principal de veredas funcional"
log_success "‚úÖ B√∫squeda de veredas funcional"
log_success "‚úÖ Estad√≠sticas funcionales"
log_success "‚úÖ No hay errores de id_sector"
echo ""
log_success "El problema del id_sector ha sido solucionado"
echo ""
