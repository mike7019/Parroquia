{
  "info": {
    "name": "Sistema Parroquia - Autenticaci√≥n",
    "description": "Colecci√≥n completa de endpoints de autenticaci√≥n para el Sistema Parroquia\n\n**Configuraci√≥n:**\n- Variable {{baseUrl}}: http://localhost:3000/api/auth\n- Variable {{accessToken}}: Se actualiza autom√°ticamente con el login\n\n**‚ö†Ô∏è IMPORTANTE - Flujo obligatorio:**\n1. **Register** - Registrar usuario\n2. **Verify Email** - ‚≠ê REQUERIDO antes del login\n   - En desarrollo: Token aparece en logs del servidor\n   - En producci√≥n: Token enviado por email\n3. **Login** - Solo funciona DESPU√âS de verificar email\n4. **Get Profile** - Obtener perfil (requiere autenticaci√≥n)\n\n**üîç Para obtener token de verificaci√≥n:**\n- Revisa los logs del servidor despu√©s del registro\n- Busca: \"Verification URL: http://...?token=TU_TOKEN\"\n- Copia el token y √∫salo en \"Verify Email\"\n\n**üìß Si no ves el token:** Usa \"Resend Verification\" para obtener uno nuevo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/auth",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "lastVerificationToken",
      "value": "",
      "type": "string",
      "description": "√öltimo token de verificaci√≥n obtenido (√∫til para desarrollo)"
    }
  ],
  "item": [
    {
      "name": "üîê Autenticaci√≥n B√°sica",
      "description": "Endpoints fundamentales para el registro, verificaci√≥n y login",
      "item": [
        {
          "name": "1. Register Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    }",
                  "    if (response.data && response.data.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "    pm.test('Usuario registrado exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "    console.log('‚úÖ Usuario registrado exitosamente');",
                  "    console.log('üìß Pr√≥ximo paso: VERIFICAR EMAIL');",
                  "    console.log('üìç Instrucciones:');",
                  "    console.log('   1. Revisa los logs del servidor ahora');",
                  "    console.log('   2. Busca: \"Verification URL: http://...\"');",
                  "    console.log('   3. Copia el token de esa URL');",
                  "    console.log('   4. Ve al endpoint \"2. Verify Email\"');",
                  "    console.log('   5. Reemplaza TOKEN_AQUI con tu token real');",
                  "    console.log('‚ö†Ô∏è  NO PUEDES hacer login sin verificar email primero');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario@test.com\",\n    \"password\": \"MiPassword123!\",\n    \"firstName\": \"Usuario\",\n    \"lastName\": \"Prueba\",\n    \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "2. Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Email verificado exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "    console.log('‚úÖ Email verificado correctamente. Ahora puedes hacer login.');",
                  "} else if (pm.response.code === 400 || pm.response.code === 401) {",
                  "    const response = pm.response.json();",
                  "    console.error('‚ùå Error en verificaci√≥n:', response.message);",
                  "    if (response.code === 'INVALID_VERIFICATION_TOKEN') {",
                  "        console.log('üí° Sugerencias:');",
                  "        console.log('   1. Verifica que copiaste el token completo');",
                  "        console.log('   2. El token solo se puede usar una vez');",
                  "        console.log('   3. Puedes solicitar un nuevo token con \"Resend Verification\"');",
                  "    }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verificar si hay un token en la URL",
                  "const url = pm.request.url.toString();",
                  "if (url.includes('TOKEN_AQUI')) {",
                  "    console.warn('‚ö†Ô∏è  IMPORTANTE: Debes reemplazar TOKEN_AQUI con el token real');",
                  "    console.log('üìç Para obtener el token:');",
                  "    console.log('   OPCI√ìN 1 - Usar herramienta de desarrollo:');",
                  "    console.log('      1. Ve al endpoint \"Get Verification Token (DEV)\"');",
                  "    console.log('      2. Ejecuta con el email del usuario');",
                  "    console.log('      3. Copia el token y regresa aqu√≠');",
                  "    console.log('   OPCI√ìN 2 - Revisar logs del servidor:');",
                  "    console.log('      1. Despu√©s de registrarte, revisa los logs del servidor');",
                  "    console.log('      2. Busca el mensaje que dice \"Verification URL:\"');",
                  "    console.log('      3. Copia el token de esa URL');",
                  "    console.log('   OPCI√ìN 3 - Reenviar email:');",
                  "    console.log('      1. Usa \"Resend Verification\" para obtener un nuevo token');",
                  "    ",
                  "    // Verificar si hay un token guardado",
                  "    const savedToken = pm.collectionVariables.get('lastVerificationToken');",
                  "    if (savedToken) {",
                  "        console.log('üí° TIP: Hay un token guardado de la √∫ltima consulta.');",
                  "        console.log('Token guardado: ' + savedToken);",
                  "        console.log('Puedes usar este token si es para el mismo usuario.');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/verify-email?token=TOKEN_AQUI",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "verify-email"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "TOKEN_AQUI",
                  "description": "üîë REEMPLAZA con tu token real. En desarrollo: revisa logs del servidor. En producci√≥n: revisa tu email."
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    }",
                  "    if (response.data && response.data.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "    pm.test('Login exitoso', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "    console.log('‚úÖ Login exitoso. Token guardado en variables de colecci√≥n.');",
                  "} else if (pm.response.code === 401) {",
                  "    const response = pm.response.json();",
                  "    console.error('‚ùå Error de autenticaci√≥n:', response.message);",
                  "    if (response.code === 'EMAIL_NOT_VERIFIED') {",
                  "        console.log('üìß Tu email no est√° verificado. Pasos a seguir:');",
                  "        console.log('   1. Ve al endpoint \"2. Verify Email\"');",
                  "        console.log('   2. Revisa los logs del servidor para obtener el token');",
                  "        console.log('   3. O usa \"Resend Verification\" para nuevo token');",
                  "        console.log('   4. Despu√©s de verificar, intenta login nuevamente');",
                  "    } else if (response.code === 'ACCOUNT_DEACTIVATED') {",
                  "        console.log('üö´ Cuenta desactivada. Contacta al administrador.');",
                  "    } else {",
                  "        console.log('üîê Verifica email y contrase√±a.');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario@test.com\",\n    \"password\": \"MiPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "ÔøΩÔ∏è Herramientas de Desarrollo",
      "description": "Endpoints √∫tiles para desarrollo y testing (solo disponibles en NODE_ENV=development)",
      "item": [
        {
          "name": "Get Verification Token (DEV)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Token obtenido exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "    if (response.data && response.data.token) {",
                  "        console.log('üîë TOKEN DE VERIFICACI√ìN:');",
                  "        console.log(response.data.token);",
                  "        console.log('üîó URL completa de verificaci√≥n:');",
                  "        console.log(response.data.verificationUrl);",
                  "        console.log('üìã Pr√≥ximos pasos:');",
                  "        console.log('   1. Copia el token de arriba');",
                  "        console.log('   2. Ve al endpoint \"2. Verify Email\"');",
                  "        console.log('   3. Reemplaza TOKEN_AQUI con el token copiado');",
                  "        console.log('   4. Ejecuta la verificaci√≥n');",
                  "        // Opcional: guardar token en variable para uso autom√°tico",
                  "        pm.collectionVariables.set('lastVerificationToken', response.data.token);",
                  "    }",
                  "} else if (pm.response.code === 403) {",
                  "    console.log('‚ùå Este endpoint solo est√° disponible en modo desarrollo');",
                  "    console.log('üí° Verifica que NODE_ENV=development en tu servidor');",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ùå Usuario no encontrado o email ya verificado');",
                  "    console.log('üí° Verifica el email o registra un nuevo usuario');",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.log('üõ†Ô∏è Obteniendo token de verificaci√≥n para desarrollo...');",
                  "console.log('üìß Email a consultar: ' + pm.request.url.query.get('email'));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/dev/get-verification-token?email=usuario@test.com",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "dev",
                "get-verification-token"
              ],
              "query": [
                {
                  "key": "email",
                  "value": "usuario@test.com",
                  "description": "Email del usuario registrado"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "ÔøΩüë§ Gesti√≥n de Perfil",
      "description": "Endpoints para gesti√≥n del perfil de usuario autenticado",
      "item": [
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Perfil obtenido exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profile"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Contrase√±a cambiada exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"MiPassword123!\",\n    \"newPassword\": \"NuevaPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "change-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "    const response = pm.response.json();",
                  "    pm.test('Logout exitoso', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "logout"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîÑ Gesti√≥n de Tokens",
      "description": "Endpoints para renovar y gestionar tokens de acceso",
      "item": [
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.accessToken) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    }",
                  "    if (response.data && response.data.refreshToken) {",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "    pm.test('Token renovado exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/refresh-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "refresh-token"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìß Gesti√≥n de Email",
      "description": "Endpoints para verificaci√≥n y reenv√≠o de emails",
      "item": [
        {
          "name": "Resend Verification (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Email de verificaci√≥n reenviado', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario@test.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/resend-verification-public",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resend-verification-public"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Resend Verification (Authenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Email de verificaci√≥n reenviado', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resend-verification",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resend-verification"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîë Recovery de Contrase√±a",
      "description": "Endpoints para recuperaci√≥n y reseteo de contrase√±as",
      "item": [
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Email de recuperaci√≥n enviado', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario@test.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "forgot-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Contrase√±a reseteada exitosamente', function () {",
                  "        pm.expect(response.status).to.eql('success');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"TOKEN_DE_RESET\",\n    \"newPassword\": \"NuevaPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reset-password"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üß™ Tests Adicionales",
      "description": "Endpoints adicionales para testing y verificaciones",
      "item": [
        {
          "name": "Test Authentication Required",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Debe requerir autenticaci√≥n', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profile"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Debe rechazar credenciales inv√°lidas', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario@test.com\",\n    \"password\": \"PasswordIncorrecto\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
