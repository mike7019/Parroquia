version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: parroquia-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: parroquia_db
      POSTGRES_USER: parroquia_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-parroquia_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - parroquia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U parroquia_user -d parroquia_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Parroquia API Application
  api:
    build: .
    container_name: parroquia-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: parroquia_db
      DB_USER: parroquia_user
      DB_PASSWORD: ${DB_PASSWORD:-parroquia_password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASS: ${EMAIL_PASS:-your-app-password}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@parroquia.com}
    ports:
      - "3000:3000"
    networks:
      - parroquia-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  parroquia-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
