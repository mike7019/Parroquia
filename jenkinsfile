pipeline {
    agent any

    environment {
        // IP o dominio de tu servidor de producci√≥n
        SERVER_IP = '206.62.139.100'
        // Usuario para conectar por SSH al servidor
        SERVER_USER = 'l4bs' // Ajusta seg√∫n tu usuario real
        // Ruta absoluta a la carpeta de tu proyecto en el servidor
        PROJECT_PATH = '/home/l4bs/parroquia/backend/Parroquia' // Ajusta seg√∫n tu ruta real
        // ID de la credencial SSH que creaste en Jenkins
        SSH_CREDENTIAL_ID = 'servidor-produccion-ssh'
        // Puerto de la aplicaci√≥n
        APP_PORT = '3000'
        // Rama a desplegar
        DEPLOY_BRANCH = 'feature'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clona el repositorio desde la rama que activ√≥ el pipeline
                echo 'Obteniendo el c√≥digo m√°s reciente...'
                checkout scm
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Desplegando en el servidor ${SERVER_IP}..."
                // Usa el plugin SSH Agent para conectar de forma segura
                sshagent([SSH_CREDENTIAL_ID]) {
                    // Ejecuta los comandos de despliegue en el servidor remoto
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'EOL'
                            echo 'Conectado al servidor. Actualizando...'
                            
                            # Navega a la carpeta del proyecto
                            cd ${PROJECT_PATH}
                            
                            # Asegura que estemos en la rama correcta
                            git checkout ${DEPLOY_BRANCH}
                            
                            # Baja los √∫ltimos cambios
                            git pull origin ${DEPLOY_BRANCH}
                            
                            # Copia el archivo de configuraci√≥n de producci√≥n si existe
                            if [ -f .env.production ]; then
                                echo 'Configurando variables de entorno...'
                                cp .env.production .env
                            else
                                echo 'Advertencia: No se encontr√≥ .env.production'
                            fi
                            
                            echo 'Deteniendo servicios actuales (si existen)...'
                            docker-compose down || true
                            
                            echo 'Limpiando contenedores e im√°genes antiguas...'
                            docker system prune -f
                            
                            echo 'Construyendo y desplegando los nuevos contenedores...'
                            # El --build reconstruye la imagen de la api con los nuevos cambios
                            # El -d lo ejecuta en segundo plano (detached)
                            docker-compose up --build -d
                            
                            echo 'Esperando que los servicios se inicien...'
                            sleep 30
                            
                            echo '‚úÖ Despliegue completado.'
                        EOL
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üîç Verificando que la aplicaci√≥n est√© funcionando..."
                sshagent([SSH_CREDENTIAL_ID]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'EOL'
                            echo 'Verificando estado de los contenedores...'
                            docker-compose ps
                            
                            echo 'Verificando logs de la aplicaci√≥n...'
                            docker-compose logs --tail=20 api
                            
                            echo 'Probando endpoint de salud...'
                            curl -f http://localhost:${APP_PORT}/api/health || exit 1
                            
                            echo '‚úÖ La aplicaci√≥n est√° funcionando correctamente.'
                        EOL
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado.'
            // Limpia el workspace de Jenkins
            cleanWs()
        }
        success {
            echo 'üéâ El despliegue fue exitoso.'
            // Aqu√≠ podr√≠as agregar notificaciones de √©xito
            // slackSend(channel: '#deployments', message: "‚úÖ Despliegue exitoso en ${SERVER_IP}")
        }
        failure {
            echo '‚ùå El despliegue fall√≥.'
            // Recolecta logs para debugging
            sshagent([SSH_CREDENTIAL_ID]) {
                sh """
                    ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} << 'EOL'
                        cd ${PROJECT_PATH}
                        echo 'Logs de los contenedores:'
                        docker-compose logs --tail=50
                        echo 'Estado de los contenedores:'
                        docker-compose ps
                    EOL
                """ || true // No fallar si no puede conectar
            }
            // Aqu√≠ podr√≠as agregar notificaciones de fallo
            // slackSend(channel: '#deployments', message: "‚ùå Fallo en despliegue en ${SERVER_IP}")
        }
    }
}