'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üîß Iniciando correcci√≥n de problemas de integridad de datos...');

      // 1. LIMPIAR DUPLICADOS EN TABLA SEXO
      console.log('üìã Limpiando duplicados en tabla sexo...');
      
      // Primero verificar si existen duplicados
      const [duplicates] = await queryInterface.sequelize.query(
        'SELECT descripcion, COUNT(*) as count FROM sexo GROUP BY descripcion HAVING COUNT(*) > 1',
        { transaction }
      );

      if (duplicates.length > 0) {
        console.log(`   - Encontrados ${duplicates.length} tipos de duplicados`);
        
        // Eliminar duplicados manteniendo solo los primeros registros (ID m√°s bajo)
        await queryInterface.sequelize.query(`
          DELETE FROM sexo 
          WHERE id_sexo NOT IN (
            SELECT MIN(id_sexo) 
            FROM sexo 
            GROUP BY descripcion
          )
        `, { transaction });
        
        console.log('   ‚úÖ Duplicados eliminados');
      }

      // 2. CORREGIR C√ìDIGOS EN TIPO_IDENTIFICACION
      console.log('üìã Corrigiendo c√≥digos en tipo_identificacion...');
      
      // Verificar si existe la columna tipo_identificacion_pk
      const tableInfo = await queryInterface.describeTable('tipo_identificacion');
      
      if (tableInfo.tipo_identificacion_pk) {
        // Corregir c√≥digos incorrectos
        const corrections = [
          { id: 1, correct_code: 'RC', description: 'Registro civil' },
          { id: 2, correct_code: 'TI', description: 'Tarjeta de identidad' },
          { id: 4, correct_code: 'CC', description: 'Cedula' },
          { id: 5, correct_code: 'PP', description: 'Pasaporte' },
          { id: 6, correct_code: 'NIT', description: 'NIT' }
        ];

        for (const correction of corrections) {
          await queryInterface.sequelize.query(
            'UPDATE tipo_identificacion SET tipo_identificacion_pk = ? WHERE id_tipo_identificacion = ?',
            {
              replacements: [correction.correct_code, correction.id],
              transaction
            }
          );
        }
        
        console.log('   ‚úÖ C√≥digos de identificaci√≥n corregidos');
      }

      // 3. OPTIMIZAR ESTRUCTURA DE ESTADO_CIVIL
      console.log('üìã Optimizando estructura de estado_civil...');
      
      // Crear mapeo de conversi√≥n simple
      const estadosCivilesOptimizados = [
        { nuevo_id: 1, nueva_descripcion: 'Soltero/a', ids_originales: [1, 2] }, // Soltero, Soltera
        { nuevo_id: 2, nueva_descripcion: 'Casado/a', ids_originales: [3, 4] },  // Casado, Casada
        { nuevo_id: 3, nueva_descripcion: 'Viudo/a', ids_originales: [5, 6] },   // Viudo, Viuda
        { nuevo_id: 4, nueva_descripcion: 'Union libre', ids_originales: [7] },  // Union libre
        { nuevo_id: 5, nueva_descripcion: 'Divorciado/a', ids_originales: [8, 9] }, // Divorciado, Divorciada
        { nuevo_id: 6, nueva_descripcion: 'Cabeza de hogar', ids_originales: [10, 11] }, // Padre/Madre cabeza de hogar
        { nuevo_id: 7, nueva_descripcion: 'Matrimonio religioso', ids_originales: [12] } // Matrimonio religioso
      ];

      // Actualizar referencias en tabla personas
      for (const estado of estadosCivilesOptimizados) {
        for (const idOriginal of estado.ids_originales) {
          await queryInterface.sequelize.query(
            'UPDATE personas SET id_estado_civil_estado_civil = ? WHERE id_estado_civil_estado_civil = ?',
            {
              replacements: [estado.nuevo_id, idOriginal],
              transaction
            }
          );
        }
      }

      // Respaldar foreign key constraint antes de eliminar tabla
      await queryInterface.sequelize.query(`
        ALTER TABLE personas DROP CONSTRAINT IF EXISTS fk_personas_estado_civil
      `, { transaction });

      // Recrear tabla estado_civil con estructura optimizada
      await queryInterface.sequelize.query('DROP TABLE estado_civil CASCADE', { transaction });
      
      await queryInterface.sequelize.query(`
        CREATE TABLE estado_civil (
          id_estado_civil bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
          descripcion character varying(255) NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT estado_civil_pk PRIMARY KEY (id_estado_civil)
        )
      `, { transaction });

      // Insertar datos optimizados
      for (const estado of estadosCivilesOptimizados) {
        await queryInterface.sequelize.query(
          'INSERT INTO estado_civil (id_estado_civil, descripcion, created_at, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)',
          {
            replacements: [estado.nuevo_id, estado.nueva_descripcion],
            transaction
          }
        );
      }

      // Restablecer secuencia
      await queryInterface.sequelize.query(`
        SELECT setval('estado_civil_id_estado_civil_seq', 7)
      `, { transaction });

      console.log('   ‚úÖ Estructura de estado_civil optimizada');

      // 4. VERIFICAR EMAIL DEL ADMIN PARA TESTING
      console.log('üìã Verificando email del usuario admin...');
      
      const [adminUsers] = await queryInterface.sequelize.query(
        'SELECT id, correo_electronico, email_verificado FROM usuarios WHERE correo_electronico = ?',
        {
          replacements: ['admin@parroquia.com'],
          transaction
        }
      );

      if (adminUsers.length > 0) {
        await queryInterface.sequelize.query(
          'UPDATE usuarios SET email_verificado = true, fecha_verificacion_email = CURRENT_TIMESTAMP WHERE correo_electronico = ?',
          {
            replacements: ['admin@parroquia.com'],
            transaction
          }
        );
        console.log('   ‚úÖ Email del admin verificado para testing');
      } else {
        console.log('   ‚ö†Ô∏è  Usuario admin no encontrado');
      }

      // 5. RECREAR FOREIGN KEYS PARA ESTADO_CIVIL
      console.log('üìã Recreando foreign keys...');
      
      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE personas 
          ADD CONSTRAINT fk_personas_estado_civil 
          FOREIGN KEY (id_estado_civil_estado_civil) 
          REFERENCES estado_civil (id_estado_civil) 
          ON DELETE SET NULL ON UPDATE CASCADE
        `, { transaction });
        console.log('   ‚úÖ Foreign keys recreadas');
      } catch (error) {
        if (!error.message.includes('already exists')) {
          throw error;
        }
        console.log('   ‚ÑπÔ∏è  Foreign key ya existe');
      }

      await transaction.commit();
      console.log('‚úÖ Correcci√≥n de integridad de datos completada exitosamente');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Error durante la correcci√≥n de integridad:', error);
      throw error;
    }
  },

  async down(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üîÑ Revirtiendo correcciones de integridad de datos...');

      // Revertir verificaci√≥n de email del admin
      await queryInterface.sequelize.query(
        'UPDATE usuarios SET email_verificado = false, fecha_verificacion_email = NULL WHERE correo_electronico = ?',
        {
          replacements: ['admin@parroquia.com'],
          transaction
        }
      );

      // Nota: No se pueden revertir autom√°ticamente los duplicados eliminados
      // ni la optimizaci√≥n de estado_civil sin respaldo de datos
      console.log('‚ö†Ô∏è  Advertencia: Algunos cambios no se pueden revertir autom√°ticamente');
      console.log('   - Duplicados eliminados en tabla sexo');
      console.log('   - Optimizaci√≥n de estructura estado_civil');
      
      await transaction.commit();
      console.log('‚úÖ Reversi√≥n parcial completada');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Error durante la reversi√≥n:', error);
      throw error;
    }
  }
};
