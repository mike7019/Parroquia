import axios from 'axios';

const BASE_URL = 'http://localhost:3000/api';

// Datos de autenticaci√≥n
const loginData = {
  correo_electronico: 'admin@parroquia.com',
  contrasena: 'admin123'
};

async function testParroquiaAPI() {
  try {
    console.log('üîê Iniciando sesi√≥n...');
    
    // Login
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, loginData);
    const token = loginResponse.data.token;
    
    const authHeaders = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    console.log('‚úÖ Login exitoso');
    console.log('üìã Token obtenido');
    
    // 1. Obtener todos los municipios para usar en las pruebas
    console.log('\nüèôÔ∏è  Obteniendo municipios...');
    const municipiosResponse = await axios.get(`${BASE_URL}/catalog/municipios`, { headers: authHeaders });
    const municipios = municipiosResponse.data.data || municipiosResponse.data;
    
    if (municipios.length === 0) {
      console.log('‚ùå No hay municipios disponibles para la prueba');
      return;
    }
    
    const municipio = municipios[0]; // Usar el primer municipio
    console.log(`‚úÖ Usando municipio: ${municipio.nombre_municipio} (ID: ${municipio.id_municipio})`);
    
    // 2. Crear una nueva parroquia con todos los campos
    console.log('\n‚ûï Creando nueva parroquia...');
    const nuevaParroquia = {
      nombre: 'Parroquia San Jos√©',
      id_municipio: municipio.id_municipio,
      descripcion: 'Parroquia dedicada a San Jos√©, patr√≥n de los trabajadores',
      direccion: 'Calle 123 #45-67, Centro',
      telefono: '+57 301 234 5678',
      email: 'sanjose@parroquia.com',
      activo: true
    };
    
    const createResponse = await axios.post(`${BASE_URL}/catalog/parroquias`, nuevaParroquia, { headers: authHeaders });
    const parroquiaCreada = createResponse.data.data;
    
    console.log('‚úÖ Parroquia creada exitosamente:');
    console.log(`   ID: ${parroquiaCreada.id_parroquia}`);
    console.log(`   Nombre: ${parroquiaCreada.nombre}`);
    console.log(`   Municipio: ${parroquiaCreada.municipio?.nombre_municipio || 'N/A'}`);
    console.log(`   Descripci√≥n: ${parroquiaCreada.descripcion}`);
    console.log(`   Direcci√≥n: ${parroquiaCreada.direccion}`);
    console.log(`   Tel√©fono: ${parroquiaCreada.telefono}`);
    console.log(`   Email: ${parroquiaCreada.email}`);
    console.log(`   Activo: ${parroquiaCreada.activo}`);
    
    // 3. Obtener parroquia por ID
    console.log('\nüîç Obteniendo parroquia por ID...');
    const getResponse = await axios.get(`${BASE_URL}/catalog/parroquias/${parroquiaCreada.id_parroquia}`, { headers: authHeaders });
    const parroquiaObtenida = getResponse.data.data;
    
    console.log('‚úÖ Parroquia obtenida:');
    console.log(`   Nombre: ${parroquiaObtenida.nombre}`);
    console.log(`   Municipio: ${parroquiaObtenida.municipio?.nombre_municipio || 'N/A'}`);
    
    // 4. Actualizar parroquia
    console.log('\n‚úèÔ∏è  Actualizando parroquia...');
    const datosActualizacion = {
      descripcion: 'Parroquia actualizada - San Jos√©, patr√≥n de la familia y el trabajo',
      telefono: '+57 301 987 6543'
    };
    
    const updateResponse = await axios.put(`${BASE_URL}/catalog/parroquias/${parroquiaCreada.id_parroquia}`, datosActualizacion, { headers: authHeaders });
    const parroquiaActualizada = updateResponse.data.data;
    
    console.log('‚úÖ Parroquia actualizada:');
    console.log(`   Descripci√≥n: ${parroquiaActualizada.descripcion}`);
    console.log(`   Tel√©fono: ${parroquiaActualizada.telefono}`);
    
    // 5. Obtener parroquias por municipio  
    console.log('\nüèôÔ∏è  Obteniendo parroquias por municipio...');
    try {
      const parroquiasMunicipioResponse = await axios.get(`${BASE_URL}/catalog/parroquias/municipio/${municipio.id_municipio}`, { headers: authHeaders });
      const parroquiasMunicipio = parroquiasMunicipioResponse.data.data;
      console.log(`‚úÖ Parroquias encontradas en municipio ${municipio.nombre_municipio}: ${parroquiasMunicipio.length}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Endpoint de municipio no disponible, continuando...');
    }
    
    // 6. Buscar parroquias
    console.log('\nüîé Buscando parroquias con "San"...');
    const searchResponse = await axios.get(`${BASE_URL}/catalog/parroquias?search=San`, { headers: authHeaders });
    const resultadosBusqueda = searchResponse.data.data;
    
    console.log(`‚úÖ Resultados de b√∫squeda: ${resultadosBusqueda.parroquias?.length || resultadosBusqueda.length || 0} parroquias encontradas`);
    
    // 7. Obtener todas las parroquias
    console.log('\nüìã Obteniendo todas las parroquias...');
    const allResponse = await axios.get(`${BASE_URL}/catalog/parroquias`, { headers: authHeaders });
    const todasParroquias = allResponse.data.data;
    
    console.log(`‚úÖ Total de parroquias: ${todasParroquias.total || todasParroquias.parroquias?.length || todasParroquias.length || 'N/A'}`);
    
    console.log('\nüéâ ¬°Todas las pruebas del API de Parroquias completadas exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.response?.data || error.message);
    if (error.response?.status === 401) {
      console.error('üîí Error de autenticaci√≥n. Verifica las credenciales.');
    }
  }
}

testParroquiaAPI();
