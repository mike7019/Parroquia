# Test completo del CRUD de Estudios
# Este script prueba todos los endpoints del sistema de estudios

$baseUrl = "http://localhost:3000/api"
$authUrl = "$baseUrl/auth/login"
$estudiosUrl = "$baseUrl/catalog/estudios"

Write-Host "üß™ Iniciando pruebas del CRUD de Estudios" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Yellow

# Headers comunes
$headers = @{
    "Content-Type" = "application/json"
}

# 1. Login para obtener token
Write-Host "`n1. üîê Obteniendo token de autenticaci√≥n..." -ForegroundColor Cyan
try {
    $loginBody = @{
        email = "admin@example.com"
        password = "admin123"
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri $authUrl -Method POST -Body $loginBody -Headers $headers
    $token = $loginResponse.data.token
    
    # Agregar token a headers
    $headers["Authorization"] = "Bearer $token"
    
    Write-Host "‚úÖ Login exitoso" -ForegroundColor Green
    Write-Host "Token: $($token.Substring(0, 20))..." -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error en login: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 2. Obtener estad√≠sticas
Write-Host "`n2. üìä Obteniendo estad√≠sticas..." -ForegroundColor Cyan
try {
    $statsResponse = Invoke-RestMethod -Uri "$estudiosUrl/stats" -Method GET -Headers $headers
    Write-Host "‚úÖ Estad√≠sticas obtenidas:" -ForegroundColor Green
    Write-Host "   Total: $($statsResponse.data.total)" -ForegroundColor Gray
    Write-Host "   Activos: $($statsResponse.data.activos)" -ForegroundColor Gray
    Write-Host "   Inactivos: $($statsResponse.data.inactivos)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error obteniendo estad√≠sticas: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. Listar todos los estudios
Write-Host "`n3. üìã Listando todos los estudios..." -ForegroundColor Cyan
try {
    $listResponse = Invoke-RestMethod -Uri $estudiosUrl -Method GET -Headers $headers
    Write-Host "‚úÖ Lista obtenida: $($listResponse.data.estudios.Count) estudios encontrados" -ForegroundColor Green
    
    $listResponse.data.estudios | ForEach-Object {
        $status = if ($_.activo) { "‚úÖ" } else { "‚ùå" }
        Write-Host "   $status ID: $($_.id) - $($_.nivel)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Error listando estudios: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. Crear un nuevo estudio
Write-Host "`n4. ‚ûï Creando nuevo estudio..." -ForegroundColor Cyan
$nuevoEstudio = @{
    nivel = "Curso de prueba"
    descripcion = "Estudio creado durante las pruebas automatizadas"
    ordenNivel = 99
    activo = $true
} | ConvertTo-Json

try {
    $createResponse = Invoke-RestMethod -Uri $estudiosUrl -Method POST -Body $nuevoEstudio -Headers $headers
    $estudoCreado = $createResponse.data
    Write-Host "‚úÖ Estudio creado exitosamente:" -ForegroundColor Green
    Write-Host "   ID: $($estudoCreado.id)" -ForegroundColor Gray
    Write-Host "   Nivel: $($estudoCreado.nivel)" -ForegroundColor Gray
    Write-Host "   Orden: $($estudoCreado.ordenNivel)" -ForegroundColor Gray
    
    $estudioId = $estudoCreado.id
} catch {
    Write-Host "‚ùå Error creando estudio: $($_.Exception.Message)" -ForegroundColor Red
    $estudioId = $null
}

# 5. Obtener estudio por ID
if ($estudioId) {
    Write-Host "`n5. üîç Obteniendo estudio por ID..." -ForegroundColor Cyan
    try {
        $getResponse = Invoke-RestMethod -Uri "$estudiosUrl/$estudioId" -Method GET -Headers $headers
        Write-Host "‚úÖ Estudio obtenido:" -ForegroundColor Green
        Write-Host "   ID: $($getResponse.data.id)" -ForegroundColor Gray
        Write-Host "   Nivel: $($getResponse.data.nivel)" -ForegroundColor Gray
        Write-Host "   Descripci√≥n: $($getResponse.data.descripcion)" -ForegroundColor Gray
        Write-Host "   Activo: $($getResponse.data.activo)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error obteniendo estudio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 6. Actualizar estudio
if ($estudioId) {
    Write-Host "`n6. ‚úèÔ∏è Actualizando estudio..." -ForegroundColor Cyan
    $updateData = @{
        nivel = "Curso de prueba actualizado"
        descripcion = "Descripci√≥n actualizada durante las pruebas"
        ordenNivel = 100
        activo = $true
    } | ConvertTo-Json

    try {
        $updateResponse = Invoke-RestMethod -Uri "$estudiosUrl/$estudioId" -Method PUT -Body $updateData -Headers $headers
        Write-Host "‚úÖ Estudio actualizado exitosamente:" -ForegroundColor Green
        Write-Host "   Nuevo nivel: $($updateResponse.data.nivel)" -ForegroundColor Gray
        Write-Host "   Nueva descripci√≥n: $($updateResponse.data.descripcion)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error actualizando estudio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 7. Buscar estudios
Write-Host "`n7. üîé Buscando estudios..." -ForegroundColor Cyan
try {
    $searchResponse = Invoke-RestMethod -Uri "$estudiosUrl/search?q=prueba" -Method GET -Headers $headers
    Write-Host "‚úÖ B√∫squeda completada: $($searchResponse.data.estudios.Count) resultados" -ForegroundColor Green
    
    $searchResponse.data.estudios | ForEach-Object {
        Write-Host "   üîç ID: $($_.id) - $($_.nivel)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Error en b√∫squeda: $($_.Exception.Message)" -ForegroundColor Red
}

# 8. Eliminar estudio (soft delete)
if ($estudioId) {
    Write-Host "`n8. üóëÔ∏è Eliminando estudio (soft delete)..." -ForegroundColor Cyan
    try {
        $deleteResponse = Invoke-RestMethod -Uri "$estudiosUrl/$estudioId" -Method DELETE -Headers $headers
        Write-Host "‚úÖ Estudio eliminado exitosamente" -ForegroundColor Green
        Write-Host "   Mensaje: $($deleteResponse.message)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error eliminando estudio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 9. Verificar que el estudio fue eliminado
if ($estudioId) {
    Write-Host "`n9. ‚úÖ Verificando eliminaci√≥n..." -ForegroundColor Cyan
    try {
        $getDeletedResponse = Invoke-RestMethod -Uri "$estudiosUrl/$estudioId" -Method GET -Headers $headers
        Write-Host "‚ùå ERROR: El estudio a√∫n existe despu√©s de ser eliminado" -ForegroundColor Red
    } catch {
        if ($_.Exception.Response.StatusCode -eq 404) {
            Write-Host "‚úÖ Confirmado: Estudio eliminado correctamente (404 Not Found)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Error inesperado: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# 10. Restaurar estudio
if ($estudioId) {
    Write-Host "`n10. ‚ôªÔ∏è Restaurando estudio..." -ForegroundColor Cyan
    try {
        $restoreResponse = Invoke-RestMethod -Uri "$estudiosUrl/$estudioId/restore" -Method PUT -Headers $headers
        Write-Host "‚úÖ Estudio restaurado exitosamente:" -ForegroundColor Green
        Write-Host "   Nivel: $($restoreResponse.data.nivel)" -ForegroundColor Gray
        Write-Host "   Activo: $($restoreResponse.data.activo)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error restaurando estudio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 11. Eliminar definitivamente el estudio de prueba
if ($estudioId) {
    Write-Host "`n11. üßπ Limpieza: Eliminando estudio de prueba..." -ForegroundColor Cyan
    try {
        Invoke-RestMethod -Uri "$estudiosUrl/$estudioId" -Method DELETE -Headers $headers | Out-Null
        Write-Host "‚úÖ Estudio de prueba eliminado para limpieza" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Advertencia: No se pudo limpiar el estudio de prueba" -ForegroundColor Yellow
    }
}

# 12. Estad√≠sticas finales
Write-Host "`n12. üìä Estad√≠sticas finales..." -ForegroundColor Cyan
try {
    $finalStatsResponse = Invoke-RestMethod -Uri "$estudiosUrl/stats" -Method GET -Headers $headers
    Write-Host "‚úÖ Estad√≠sticas finales:" -ForegroundColor Green
    Write-Host "   Total: $($finalStatsResponse.data.total)" -ForegroundColor Gray
    Write-Host "   Activos: $($finalStatsResponse.data.activos)" -ForegroundColor Gray
    Write-Host "   Inactivos: $($finalStatsResponse.data.inactivos)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error obteniendo estad√≠sticas finales: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Pruebas del CRUD de Estudios completadas" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Yellow

# Test de documentaci√≥n Swagger
Write-Host "`nüìö Para ver la documentaci√≥n de Swagger:" -ForegroundColor Cyan
Write-Host "   http://localhost:3000/api-docs" -ForegroundColor Blue
Write-Host "   Busca la secci√≥n 'Catalog - Estudios'" -ForegroundColor Gray
