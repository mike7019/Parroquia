import { specs } from './src/config/swagger.js';
import fs from 'fs';

// Funci√≥n para verificar la especificaci√≥n de Swagger
function debugSwaggerSpec() {
  console.log('\nüîç DIAGN√ìSTICO DE SWAGGER SPECIFICATION\n');
  
  // 1. Verificar que la especificaci√≥n se genere correctamente
  console.log('1. ‚úÖ Swagger specification generada correctamente');
  console.log(`   ‚Ä¢ Versi√≥n OpenAPI: ${specs.openapi}`);
  console.log(`   ‚Ä¢ T√≠tulo: ${specs.info.title}`);
  console.log(`   ‚Ä¢ Total de rutas: ${Object.keys(specs.paths || {}).length}`);
  
  // 2. Verificar esquemas
  console.log('\n2. üìã VERIFICACI√ìN DE ESQUEMAS:');
  const schemas = specs.components?.schemas || {};
  console.log(`   ‚Ä¢ Total de esquemas: ${Object.keys(schemas).length}`);
  
  // Verificar espec√≠ficamente SectorInput
  if (schemas.SectorInput) {
    console.log('\n   ‚úÖ Esquema SectorInput encontrado:');
    console.log(`      ‚Ä¢ Tipo: ${schemas.SectorInput.type}`);
    console.log(`      ‚Ä¢ Propiedades: ${Object.keys(schemas.SectorInput.properties || {}).length}`);
    console.log(`      ‚Ä¢ Campos requeridos: ${(schemas.SectorInput.required || []).join(', ')}`);
    
    // Mostrar las propiedades
    if (schemas.SectorInput.properties) {
      console.log('\n      üìù Propiedades del esquema:');
      Object.entries(schemas.SectorInput.properties).forEach(([key, prop]) => {
        console.log(`         ‚Ä¢ ${key}: ${prop.type} ${prop.enum ? `[${prop.enum.join('|')}]` : ''}`);
      });
    }
  } else {
    console.log('\n   ‚ùå Esquema SectorInput NO encontrado');
  }
  
  // 3. Verificar endpoints de sectores
  console.log('\n3. üõ£Ô∏è VERIFICACI√ìN DE ENDPOINTS DE SECTORES:');
  const sectorPaths = Object.entries(specs.paths || {})
    .filter(([path]) => path.includes('/sectors'));
    
  if (sectorPaths.length > 0) {
    sectorPaths.forEach(([path, methods]) => {
      console.log(`   ‚Ä¢ ${path}:`);
      Object.entries(methods).forEach(([method, spec]) => {
        console.log(`     - ${method.toUpperCase()}: ${spec.summary || 'Sin resumen'}`);
        
        // Verificar si el POST tiene requestBody con SectorInput
        if (method === 'post' && spec.requestBody) {
          const content = spec.requestBody.content;
          if (content && content['application/json']) {
            const schema = content['application/json'].schema;
            if (schema && schema.$ref) {
              console.log(`       üìÑ Schema: ${schema.$ref}`);
              if (schema.$ref.includes('SectorInput')) {
                console.log('       ‚úÖ Referencia a SectorInput correcta');
              }
            }
          }
        }
      });
    });
  } else {
    console.log('   ‚ùå No se encontraron endpoints de sectores');
  }
  
  // 4. Guardar especificaci√≥n completa para revisi√≥n
  console.log('\n4. üíæ GUARDANDO ESPECIFICACI√ìN COMPLETA:');
  try {
    fs.writeFileSync('./swagger-debug.json', JSON.stringify(specs, null, 2));
    console.log('   ‚úÖ Especificaci√≥n guardada en: swagger-debug.json');
  } catch (error) {
    console.log(`   ‚ùå Error al guardar: ${error.message}`);
  }
  
  // 5. Verificar referencias circulares
  console.log('\n5. üîÑ VERIFICACI√ìN DE REFERENCIAS CIRCULARES:');
  try {
    JSON.stringify(specs);
    console.log('   ‚úÖ No hay referencias circulares detectadas');
  } catch (error) {
    console.log(`   ‚ùå Posible referencia circular: ${error.message}`);
  }
  
  console.log('\nüéØ DIAGN√ìSTICO COMPLETADO\n');
}

// Ejecutar diagn√≥stico
debugSwaggerSpec();
